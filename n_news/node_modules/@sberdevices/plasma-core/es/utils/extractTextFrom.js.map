{"version":3,"sources":["../../src/utils/extractTextFrom.ts"],"names":["isValidElement","Children","extractTextFrom","textSource","toString","props","children","map","child","join"],"mappings":";;AAAA,SAASA,cAAT,EAAyBC,QAAzB,QAAyC,OAAzC;AAGA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,UAAD,EAA6D;AACxF,kBAAeA,UAAf;AACI,SAAK,QAAL;AACI,aAAOA,UAAP;;AACJ,SAAK,QAAL;AACI,aAAOA,UAAU,CAACC,QAAX,EAAP;;AACJ,SAAK,QAAL;AAAe;AACX,YAAI,eAACJ,cAAc,CAACG,UAAD,CAAf,IAA+B,CAACA,UAAU,CAACE,KAA3C,IAAoD,CAACF,UAAU,CAACE,KAAX,CAAiBC,QAA1E,EAAoF;AAChF,iBAAO,EAAP;AACH;;AACD,eAAOL,QAAQ,CAACM,GAAT,CAAaJ,UAAU,CAACE,KAAX,CAAiBC,QAA9B,EAAwC,UAACE,KAAD,EAAW;AACtD,iBAAON,eAAe,CAACM,KAAD,CAAtB;AACH,SAFM,EAEJC,IAFI,CAEC,EAFD,CAAP;AAGH;;AACD;AACI,aAAO,EAAP;AAdR;AAgBH,CAjBM","sourcesContent":["import { isValidElement, Children } from 'react';\nimport type { ReactNode } from 'react';\n\nexport const extractTextFrom = (textSource?: string | number | null | ReactNode): string => {\n    switch (typeof textSource) {\n        case 'string':\n            return textSource;\n        case 'number':\n            return textSource.toString();\n        case 'object': {\n            if (!isValidElement(textSource) || !textSource.props || !textSource.props.children) {\n                return '';\n            }\n            return Children.map(textSource.props.children, (child) => {\n                return extractTextFrom(child);\n            }).join('');\n        }\n        default:\n            return '';\n    }\n};\n"],"file":"extractTextFrom.js"}