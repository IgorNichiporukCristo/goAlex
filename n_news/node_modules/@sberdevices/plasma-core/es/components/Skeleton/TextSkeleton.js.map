{"version":3,"sources":["../../../src/components/Skeleton/TextSkeleton.tsx"],"names":["React","styled","DEFAULT_TEXT_SIZE","LineSkeleton","variousWidth","StyledTextSkeleton","div","TextSkeleton","lines","width","roundness","size","props","Array","from","_","i","w","length"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAIA,SAAwBC,iBAAxB,QAAiD,YAAjD;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,IAAMC,YAAY,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,KAAb,EAAoB,IAApB,EAA0B,IAA1B,EAAgC,IAAhC,EAAsC,IAAtC,EAA4C,KAA5C,EAAmD,IAAnD,EAAyD,KAAzD,EAAgE,IAAhE,EAAsE,IAAtE,EAA4E,IAA5E,EAAkF,IAAlF,EAAwF,IAAxF,CAArB;AAEA,IAAMC,kBAAkB,gBAAGJ,MAAM,CAACK,GAAV;AAAA;AAAA,sDAAxB;;AAkBA;AACA;AACA;AACA;AACA,OAAO,IAAMC,YAAgF,GAAG,SAAnFA,YAAmF;AAAA,MAC5FC,KAD4F,QAC5FA,KAD4F;AAAA,MAE5FC,KAF4F,QAE5FA,KAF4F;AAAA,MAG5FC,SAH4F,QAG5FA,SAH4F;AAAA,uBAI5FC,IAJ4F;AAAA,MAI5FA,IAJ4F,0BAIrFT,iBAJqF;AAAA,MAKzFU,KALyF;;AAAA,sBAO5F,oBAAC,kBAAD,EAAwBA,KAAxB,EACKC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACL,KAAD,CAAhB,EAAyB,UAACO,CAAD,EAAIC,CAAJ,EAAU;AAChC,QAAIC,CAAJ;;AACA,QAAIR,KAAJ,EAAW;AACPQ,MAAAA,CAAC,GAAGR,KAAJ;AACH,KAFD,MAEO;AACH,cAAQ,IAAR;AACI;AACA,aAAKO,CAAC,KAAKR,KAAK,GAAG,CAAd,IAAmBA,KAAK,KAAK,CAAlC;AACIS,UAAAA,CAAC,GAAG,KAAKb,YAAY,CAACY,CAAC,GAAGZ,YAAY,CAACc,MAAlB,CAArB;AACA;AACJ;;AACA,aAAKV,KAAK,KAAK,CAAV,IAAeA,KAAK,KAAK,CAA9B;AACIS,UAAAA,CAAC,GAAG,GAAJ;AACA;;AACJ;AACIA,UAAAA,CAAC,GAAG,MAAMb,YAAY,CAACY,CAAC,GAAGZ,YAAY,CAACc,MAAlB,CAAtB;AAVR;AAYH;;AACD,wBAAO,oBAAC,YAAD;AAAc,MAAA,GAAG,iBAAUF,CAAV,CAAjB;AAAgC,MAAA,IAAI,EAAEL,IAAtC;AAA4C,MAAA,SAAS,EAAED,SAAvD;AAAkE,MAAA,KAAK,EAAE;AAAED,QAAAA,KAAK,YAAKQ,CAAL;AAAP;AAAzE,MAAP;AACH,GAnBA,CADL,CAP4F;AAAA,CAAzF","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nimport type { RoundnessProps } from '../../mixins';\n\nimport { TextSizeProps, DEFAULT_TEXT_SIZE } from './Skeleton';\nimport { LineSkeleton } from './LineSkeleton';\n\nconst variousWidth = [7.58, 5.27, 13.54, 6.63, 0.28, 14.8, 0.33, 11.26, 14.1, 10.59, 3.38, 13.5, 7.71, 3.34, 7.96];\n\nconst StyledTextSkeleton = styled.div`\n    display: flex;\n    flex-direction: column;\n\n    width: 100%;\n`;\n\nexport interface TextSkeletonProps extends TextSizeProps, Partial<RoundnessProps> {\n    /**\n     * Количетво линий скелета\n     */\n    lines: number;\n    /**\n     * Заданная ширина линий в процентах; по умолчанию подбирается случайная для заданного кол-ва линий\n     */\n    width?: string | number;\n}\n\n/**\n * Компонент для создания плейсхолдера нескольких строк текста.\n * Размеры компонента задаются с помощью констант и соответствуют размерам [типографических элементов](/?path=/docs/).\n */\nexport const TextSkeleton: React.FC<TextSkeletonProps & React.HTMLAttributes<HTMLDivElement>> = ({\n    lines,\n    width,\n    roundness,\n    size = DEFAULT_TEXT_SIZE,\n    ...props\n}) => (\n    <StyledTextSkeleton {...props}>\n        {Array.from(Array(lines), (_, i) => {\n            let w;\n            if (width) {\n                w = width;\n            } else {\n                switch (true) {\n                    // Последняя строка\n                    case i === lines - 1 && lines !== 1:\n                        w = 45 - variousWidth[i % variousWidth.length];\n                        break;\n                    // Единственная или первая из двух\n                    case lines === 1 || lines === 2:\n                        w = 100;\n                        break;\n                    default:\n                        w = 100 - variousWidth[i % variousWidth.length];\n                }\n            }\n            return <LineSkeleton key={`line:${i}`} size={size} roundness={roundness} style={{ width: `${w}%` }} />;\n        })}\n    </StyledTextSkeleton>\n);\n"],"file":"TextSkeleton.js"}