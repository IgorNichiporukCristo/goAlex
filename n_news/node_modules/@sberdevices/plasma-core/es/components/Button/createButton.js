var _excluded = ["children", "text", "contentLeft", "contentRight", "square"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import { ButtonRoot, ButtonText } from './Button';

/**
 * Функция для создания компонента Button,
 * что дает возможность кастомизировать вид, пропсы и т.п.,
 * при этом сохраняя в базе общий интерфейс.
 */
export function createButton() {
  var Root = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ButtonRoot;
  // eslint-disable-next-line prefer-arrow-callback
  return /*#__PURE__*/forwardRef(function Button(_ref, ref) {
    var children = _ref.children,
        text = _ref.text,
        contentLeft = _ref.contentLeft,
        contentRight = _ref.contentRight,
        square = _ref.square,
        rest = _objectWithoutProperties(_ref, _excluded);

    var isContentLeft = Boolean(contentLeft);
    var isContentRight = Boolean(contentRight);
    return /*#__PURE__*/React.createElement(Root, _extends({
      ref: ref,
      $isContentLeft: isContentLeft,
      $isContentRight: isContentRight,
      square: square !== undefined ? square : !text && !children
    }, rest), children, !children && contentLeft, !children && text && /*#__PURE__*/React.createElement(ButtonText, {
      $isContentLeft: isContentLeft,
      $isContentRight: isContentRight
    }, text), !children && contentRight);
  });
}
//# sourceMappingURL=createButton.js.map