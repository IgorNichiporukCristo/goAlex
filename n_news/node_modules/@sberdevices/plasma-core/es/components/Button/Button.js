function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import styled from 'styled-components';
import { applyDisabled, applyBlur, applyEllipsis } from '../../mixins';

/**
 * Корневой элемент для стилизации кнопки.
 * Должен быть передан в функцию `createButton`.
 */
export var ButtonRoot = /*#__PURE__*/styled.button.withConfig({
  componentId: "plasma__sc-dcpyn7-0"
})(["position:relative;display:inline-flex;align-items:center;box-sizing:border-box;justify-content:center;appearance:none;border:none;cursor:pointer;-webkit-tap-highlight-color:rgba(0,0,0,0);a&{text-decoration:none;}&:focus{outline:none;}", " ", ""], applyDisabled, applyBlur);
/**
 * A text wrapping element, that used when `text` prop is passed.
 * @private
 */

export var ButtonText = /*#__PURE__*/styled.span.withConfig({
  componentId: "plasma__sc-dcpyn7-1"
})(["box-sizing:border-box;", " ", " ", ""], applyEllipsis, function (_ref) {
  var isContentLeft = _ref.$isContentLeft;
  return isContentLeft && 'margin-left: 0.375rem;';
}, function (_ref2) {
  var isContentRight = _ref2.$isContentRight;
  return isContentRight && 'margin-right: 0.375rem;';
});
/**
 * Базовая кнопка.
 * @deprecated
 */

export var Button = /*#__PURE__*/React.forwardRef( // eslint-disable-next-line prefer-arrow-callback
function Button(props, ref) {
  return /*#__PURE__*/React.createElement(ButtonRoot, _extends({
    ref: ref
  }, props));
});
Button.defaultProps = {
  pin: 'square-square',
  outlined: false
};
//# sourceMappingURL=Button.js.map