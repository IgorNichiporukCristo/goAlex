var _excluded = ["items", "index", "onIndexChange"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef, useMemo, useCallback } from 'react';
import { TabItemRefs, TabsContext } from './TabsContext';
import { Tabs } from './Tabs';
import { TabItem } from './TabItem';
var Keys;
/**
 * Функция для создания `TabController`, которая дает возможность
 * кастомизировать стили, при этом сохраняя единый интерфейс и функционал.
 */

(function (Keys) {
  Keys[Keys["end"] = 35] = "end";
  Keys[Keys["home"] = 36] = "home";
  Keys[Keys["left"] = 37] = "left";
  Keys[Keys["right"] = 39] = "right";
})(Keys || (Keys = {}));

export function createTabsController() {
  var ListComponent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Tabs;
  var ItemComponent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TabItem;
  // eslint-disable-next-line prefer-arrow-callback
  return /*#__PURE__*/forwardRef(function TabsController(_ref, ref) {
    var items = _ref.items,
        index = _ref.index,
        onIndexChange = _ref.onIndexChange,
        rest = _objectWithoutProperties(_ref, _excluded);

    var disabled = rest.disabled;
    var refs = useMemo(function () {
      return new TabItemRefs();
    }, []);
    var onItemFocus = useCallback(function (event) {
      if (disabled) {
        return;
      }

      var focusIndex = refs.items.findIndex(function (itemRef) {
        return itemRef.current === event.target;
      });

      if (focusIndex !== index) {
        onIndexChange === null || onIndexChange === void 0 ? void 0 : onIndexChange(focusIndex);
      }
    }, [refs, index, onIndexChange, disabled]);
    var onKeyDown = useCallback(function (event) {
      if (disabled) {
        return;
      }

      var minIndex = 0;
      var maxIndex = refs.items.length - 1;
      var nextIndex;

      switch (event.keyCode) {
        case Keys.end:
          nextIndex = maxIndex;
          break;

        case Keys.left:
          nextIndex = index > minIndex ? index - 1 : index;
          break;

        case Keys.right:
          nextIndex = index < maxIndex ? index + 1 : index;
          break;

        case Keys.home:
          nextIndex = minIndex;
          break;

        default:
          return;
      }

      if (nextIndex !== index) {
        var _refs$items$nextIndex;

        event.preventDefault();
        (_refs$items$nextIndex = refs.items[nextIndex].current) === null || _refs$items$nextIndex === void 0 ? void 0 : _refs$items$nextIndex.focus();
      }
    }, [index, onIndexChange, disabled]);
    return /*#__PURE__*/React.createElement(TabsContext.Provider, {
      value: {
        refs: refs
      }
    }, /*#__PURE__*/React.createElement(ListComponent, _extends({
      ref: ref,
      onKeyDown: onKeyDown
    }, rest), items.map(function (_ref2, i) {
      var label = _ref2.label,
          contentLeft = _ref2.contentLeft;
      return /*#__PURE__*/React.createElement(ItemComponent, {
        key: i,
        isActive: i === index,
        tabIndex: !disabled && i === index ? 0 : -1,
        contentLeft: contentLeft,
        onClick: function onClick() {
          return onIndexChange === null || onIndexChange === void 0 ? void 0 : onIndexChange(i);
        },
        onFocus: onItemFocus,
        disabled: disabled
      }, label);
    })));
  });
}
//# sourceMappingURL=createTabsController.js.map