/// <reference types="react" />
import { CarouselItemRefs } from './CarouselItemRefs';
import type { BasicProps, DetectionProps } from './types';
export declare const useCarouselContext: () => import("./CarouselContext").CarouselState;
/**
 * Хук для передачи рефа айтема в контекст карусели.
 */
export declare function useCarouselItem<T extends HTMLElement | null>(): import("react").RefObject<T>;
export declare const useCarousel: ({ index, axis, detectActive, detectThreshold, scrollAlign, scaleCallback, scaleResetCallback, onScroll, onIndexChange, onDetectActiveItem, animatedScrollByIndex, throttleMs, debounceMs, }: BasicProps & Pick<Partial<DetectionProps>, "detectThreshold" | "onIndexChange" | "onDetectActiveItem" | "scaleCallback" | "scaleResetCallback"> & {
    detectActive?: boolean | undefined;
}) => {
    scrollRef: import("react").MutableRefObject<HTMLElement | null>;
    trackRef: import("react").MutableRefObject<HTMLElement | null>;
    refs: CarouselItemRefs;
    handleScroll: (event: any) => void;
};
//# sourceMappingURL=hooks.d.ts.map