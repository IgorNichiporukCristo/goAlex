{"version":3,"sources":["../../src/components/Button/Button.mixins.ts"],"names":["getButtonSizesMixin","sizes","typos","size","pin","outlined","focused","isContentLeft","$isContentLeft","isContentRight","$isContentRight","shiftLeft","shiftRight","square","stretch","theme","paddingX","paddingY","paddingStretchX","paddingContentX","css","height","radius","radiusCircle","outlineRadius"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACO,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,KAAD,EAAqBC,KAArB;AAAA,SAAiD,gBAY9C;AAAA,QAXlCC,IAWkC,QAXlCA,IAWkC;AAAA,QAVlCC,GAUkC,QAVlCA,GAUkC;AAAA,QATlCC,QASkC,QATlCA,QASkC;AAAA,QARlCC,OAQkC,QARlCA,OAQkC;AAAA,QAPlBC,aAOkB,QAPlCC,cAOkC;AAAA,QANjBC,cAMiB,QANlCC,eAMkC;AAAA,QALlCC,SAKkC,QALlCA,SAKkC;AAAA,QAJlCC,UAIkC,QAJlCA,UAIkC;AAAA,QAHlCC,MAGkC,QAHlCA,MAGkC;AAAA,QAFlCC,OAEkC,QAFlCA,OAEkC;AAAA,QADlCC,KACkC,QADlCA,KACkC;AAClC,QAAMC,QAAN,GAAmBf,KAAK,CAACE,IAAD,CAAxB,CAAMa,QAAN;;AAEA,QAAIH,MAAJ,EAAY;AACRG,MAAAA,QAAQ,GAAGf,KAAK,CAACE,IAAD,CAAL,CAAYc,QAAvB;AACH,KAFD,MAEO,IAAIH,OAAJ,EAAa;AAChBE,MAAAA,QAAQ,GAAGf,KAAK,CAACE,IAAD,CAAL,CAAYe,eAAvB;AACH,KAFM,MAEA,IAAIX,aAAa,IAAIE,cAArB,EAAqC;AACxCO,MAAAA,QAAQ,GAAGf,KAAK,CAACE,IAAD,CAAL,CAAYgB,eAAvB;AACH;;AAED,eAAOC,qBAAP,sFACcnB,KAAK,CAACE,IAAD,CAAL,CAAYkB,MAD1B,EAEepB,KAAK,CAACE,IAAD,CAAL,CAAYc,QAF3B,EAEuCD,QAFvC,EAGqB,mCAAuBZ,GAAvB,EAA4BH,KAAK,CAACE,IAAD,CAAL,CAAYmB,MAAxC,EAAgDrB,KAAK,CAACE,IAAD,CAAL,CAAYoB,YAA5D,CAHrB,EAKMT,OAAO,IAAI,cALjB,EAMMD,MAAM,sBAAeZ,KAAK,CAACE,IAAD,CAAL,CAAYkB,MAA3B,MANZ,EAOMV,SAAS,qCAA8BK,QAA9B,OAPf,EAQMJ,UAAU,sCAA+BI,QAA/B,OARhB,EASMd,KAAK,CAACC,IAAD,CATX,EAWM,sDACKY,KADL;AAEET,MAAAA,OAAO,EAAPA,OAFF;AAGED,MAAAA,QAAQ,EAARA,QAHF;AAIEmB,MAAAA,aAAa,EAAE,mCACXpB,GADW,iBAEHH,KAAK,CAACE,IAAD,CAAL,CAAYmB,MAFT,oDAGHrB,KAAK,CAACE,IAAD,CAAL,CAAYoB,YAHT;AAJjB,OAXN;AAsBH,GA7CkC;AAAA,CAA5B","sourcesContent":["import { css } from 'styled-components';\n\nimport { addFocus } from '../../mixins';\nimport { convertRoundnessMatrix } from '../../utils';\nimport type { ThemeProps } from '../../types';\n\nimport type { StyledButtonProps, ButtonSizes, ButtonTypography } from './Button.types';\n\n/**\n * Создание специализированного миксина со своими размерами и типографикой.\n * @param {Record<string, object>} sizes\n * @param {Record<string, object>} typos\n */\nexport const getButtonSizesMixin = (sizes: ButtonSizes, typos: ButtonTypography) => ({\n    size,\n    pin,\n    outlined,\n    focused,\n    $isContentLeft: isContentLeft,\n    $isContentRight: isContentRight,\n    shiftLeft,\n    shiftRight,\n    square,\n    stretch,\n    theme,\n}: ThemeProps & StyledButtonProps) => {\n    let { paddingX } = sizes[size];\n\n    if (square) {\n        paddingX = sizes[size].paddingY;\n    } else if (stretch) {\n        paddingX = sizes[size].paddingStretchX;\n    } else if (isContentLeft || isContentRight) {\n        paddingX = sizes[size].paddingContentX;\n    }\n\n    return css`\n        height: ${sizes[size].height};\n        padding: ${sizes[size].paddingY} ${paddingX};\n        border-radius: ${convertRoundnessMatrix(pin, sizes[size].radius, sizes[size].radiusCircle)};\n\n        ${stretch && 'width: 100%;'}\n        ${square && ` width: ${sizes[size].height};`}\n        ${shiftLeft && `margin-left: calc(-1 * ${paddingX});`}\n        ${shiftRight && `margin-right: calc(-1 * ${paddingX});`}\n        ${typos[size]}\n\n        ${addFocus({\n            ...theme,\n            focused,\n            outlined,\n            outlineRadius: convertRoundnessMatrix(\n                pin,\n                `calc(${sizes[size].radius} + var(--plasma-outline-size))`,\n                `calc(${sizes[size].radiusCircle} + var(--plasma-outline-size))`,\n            ),\n        })}\n    `;\n};\n"],"file":"Button.mixins.js"}