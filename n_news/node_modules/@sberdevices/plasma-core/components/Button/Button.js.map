{"version":3,"sources":["../../src/components/Button/Button.tsx"],"names":["ButtonRoot","styled","button","applyDisabled","applyBlur","ButtonText","span","applyEllipsis","isContentLeft","$isContentLeft","isContentRight","$isContentRight","Button","React","forwardRef","props","ref","defaultProps","pin","outlined"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;;;AAIA;AACA;AACA;AACA;AACO,IAAMA,UAAU,gBAAGC,6BAAOC,MAAV;AAAA;AAAA,4PAoBjBC,qBApBiB,EAqBjBC,iBArBiB,CAAhB;AAwBP;AACA;AACA;AACA;;;;;AACO,IAAMC,UAAU,gBAAGJ,6BAAOK,IAAV;AAAA;AAAA,6CAGjBC,qBAHiB,EAKjB;AAAA,MAAmBC,aAAnB,QAAGC,cAAH;AAAA,SAAuCD,aAAa,IAAI,wBAAxD;AAAA,CALiB,EAMjB;AAAA,MAAoBE,cAApB,SAAGC,eAAH;AAAA,SAAyCD,cAAc,IAAI,yBAA3D;AAAA,CANiB,CAAhB;AASP;AACA;AACA;AACA;;;;;AACO,IAAME,MAAM,gBAAGC,kBAAMC,UAAN,EAClB;AACA,SAASF,MAAT,CAAgBG,KAAhB,EAAuBC,GAAvB,EAA4B;AACxB,sBAAO,gCAAC,UAAD;AAAY,IAAA,GAAG,EAAEA;AAAjB,KAA0BD,KAA1B,EAAP;AACH,CAJiB,CAAf;;;AAOPH,MAAM,CAACK,YAAP,GAAsB;AAClBC,EAAAA,GAAG,EAAE,eADa;AAElBC,EAAAA,QAAQ,EAAE;AAFQ,CAAtB","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nimport { applyDisabled, applyBlur, applyEllipsis } from '../../mixins';\n\nimport type { ButtonIsContentProps, StyledButtonProps } from './Button.types';\n\n/**\n * Корневой элемент для стилизации кнопки.\n * Должен быть передан в функцию `createButton`.\n */\nexport const ButtonRoot = styled.button<StyledButtonProps>`\n    position: relative;\n    display: inline-flex;\n    align-items: center;\n    box-sizing: border-box;\n    justify-content: center;\n\n    appearance: none;\n    border: none;\n    cursor: pointer;\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n\n    a& {\n        text-decoration: none;\n    }\n\n    &:focus {\n        outline: none;\n    }\n\n    ${applyDisabled}\n    ${applyBlur}\n`;\n\n/**\n * A text wrapping element, that used when `text` prop is passed.\n * @private\n */\nexport const ButtonText = styled.span<ButtonIsContentProps>`\n    box-sizing: border-box;\n\n    ${applyEllipsis}\n\n    ${({ $isContentLeft: isContentLeft }) => isContentLeft && 'margin-left: 0.375rem;'}\n    ${({ $isContentRight: isContentRight }) => isContentRight && 'margin-right: 0.375rem;'}\n`;\n\n/**\n * Базовая кнопка.\n * @deprecated\n */\nexport const Button = React.forwardRef<any, any>(\n    // eslint-disable-next-line prefer-arrow-callback\n    function Button(props, ref) {\n        return <ButtonRoot ref={ref} {...props} />;\n    },\n);\n\nButton.defaultProps = {\n    pin: 'square-square',\n    outlined: false,\n};\n"],"file":"Button.js"}