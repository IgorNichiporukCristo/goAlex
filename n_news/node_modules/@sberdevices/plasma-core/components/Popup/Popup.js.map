{"version":3,"sources":["../../src/components/Popup/Popup.tsx"],"names":["StyledRoot","styled","div","StyledPopup","placement","css","Popup","React","forwardRef","outerRootRef","disclosure","children","isOpen","trigger","onToggle","rest","rootRef","popupRef","handleRef","onDocumentClick","event","targetIsRoot","target","current","rootHasTarget","contains","onClick","targetIsPopup","onMouseEnter","onMouseLeave","onFocus","onBlur","document","addEventListener","removeEventListener","display"],"mappings":"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","sourcesContent":["import React, { memo, useRef, useCallback, useEffect } from 'react';\nimport type { HTMLAttributes, ReactNode, RefAttributes, SyntheticEvent } from 'react';\nimport styled, { css } from 'styled-components';\n\nimport { useForkRef } from '../../hooks';\n\nexport interface PopupProps extends HTMLAttributes<HTMLDivElement> {\n    /**\n     * Всплывающее окно раскрыто или нет.\n     */\n    isOpen?: boolean;\n    /**\n     * Способо всплывающего окна - наведение или клик мышью.\n     */\n    trigger: 'hover' | 'click';\n    /**\n     * Расположение всплывающего окна.\n     */\n    placement: 'bottom' | 'right' | 'left';\n    /**\n     * Элемент, при нажатии на который произойдет вызов всплывающего окна.\n     */\n    disclosure?: ReactNode;\n    /**\n     * Контент всплывающего окна.\n     */\n    children?: ReactNode;\n    /**\n     * Событие сворачивания/разворачивания всплывающего окна.\n     */\n    onToggle?: (isOpen: boolean, event: SyntheticEvent) => void;\n}\n\nconst StyledRoot = styled.div`\n    position: relative;\n    box-sizing: border-box;\n    display: inline-flex;\n`;\nconst StyledPopup = styled.div<Pick<PopupProps, 'placement'>>`\n    position: absolute;\n    z-index: 1;\n    padding: var(--plasma-popup-padding);\n    margin: var(--plasma-popup-margin);\n    width: var(--plasma-popup-width);\n\n    ${({ placement }) => {\n        switch (placement) {\n            case 'left':\n                return css`\n                    top: 0;\n                    right: 100%;\n                `;\n            case 'right':\n                return css`\n                    top: 0;\n                    left: 100%;\n                `;\n            case 'bottom':\n            default:\n                return css`\n                    top: 100%;\n                    left: 0;\n                `;\n        }\n    }}\n`;\n\n/**\n * Всплывающее окно с возможностью позиционирования\n * и вызова по клику либо ховеру.\n */\nexport const Popup = memo<PopupProps & RefAttributes<HTMLDivElement>>(\n    React.forwardRef<HTMLDivElement, PopupProps>(\n        ({ disclosure, children, isOpen, trigger, placement, onToggle, ...rest }, outerRootRef) => {\n            const rootRef = useRef<HTMLDivElement | null>(null);\n            const popupRef = useRef<HTMLDivElement | null>(null);\n            const handleRef = useForkRef<HTMLDivElement>(rootRef, outerRootRef);\n\n            const onDocumentClick = useCallback(\n                (event) => {\n                    const targetIsRoot = event.target === rootRef.current;\n                    const rootHasTarget = rootRef.current?.contains(event.target);\n\n                    if (!targetIsRoot && !rootHasTarget) {\n                        onToggle?.(false, event);\n                    }\n                },\n                [onToggle],\n            );\n\n            const onClick = useCallback(\n                (event) => {\n                    if (trigger === 'click') {\n                        const targetIsPopup = event.target === popupRef;\n                        const rootHasTarget = popupRef.current?.contains(event.target);\n\n                        if (!targetIsPopup && !rootHasTarget) {\n                            onToggle?.(!isOpen, event);\n                        }\n                    }\n                },\n                [trigger, isOpen, onToggle],\n            );\n\n            const onMouseEnter = useCallback(\n                (event) => {\n                    if (trigger === 'hover') {\n                        onToggle?.(true, event);\n                    }\n                },\n                [trigger, onToggle],\n            );\n\n            const onMouseLeave = useCallback(\n                (event) => {\n                    if (trigger === 'hover') {\n                        onToggle?.(false, event);\n                    }\n                },\n                [trigger, onToggle],\n            );\n\n            const onFocus = useCallback(\n                (event) => {\n                    if (trigger === 'hover') {\n                        onToggle?.(true, event);\n                    }\n                },\n                [trigger, onToggle],\n            );\n\n            const onBlur = useCallback(\n                (event) => {\n                    if (trigger === 'hover') {\n                        onToggle?.(false, event);\n                    }\n                },\n                [trigger, onToggle],\n            );\n\n            useEffect(() => {\n                document.addEventListener('click', onDocumentClick);\n                return () => document.removeEventListener('click', onDocumentClick);\n            }, []);\n\n            return (\n                <StyledRoot\n                    ref={handleRef}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    onFocus={onFocus}\n                    onBlur={onBlur}\n                    {...rest}\n                >\n                    {disclosure}\n                    {children && (\n                        <StyledPopup\n                            ref={popupRef}\n                            placement={placement}\n                            style={{ display: isOpen ? 'block' : 'none' }}\n                        >\n                            {children}\n                        </StyledPopup>\n                    )}\n                </StyledRoot>\n            );\n        },\n    ),\n);\n"],"file":"Popup.js"}