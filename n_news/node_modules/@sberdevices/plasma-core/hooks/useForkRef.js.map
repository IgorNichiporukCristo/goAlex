{"version":3,"sources":["../src/hooks/useForkRef.ts"],"names":["useForkRef","refOne","refTwo","React","useMemo","refOb"],"mappings":";;;;;;;AAAA;;AAEA;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMA,UAA0B,GAAG,SAA7BA,UAA6B,CAACC,MAAD,EAASC,MAAT,EAAoB;AAC1D,SAAOC,kBAAMC,OAAN,CAAc,YAAM;AACvB,QAAIH,MAAM,IAAI,IAAV,IAAkBC,MAAM,KAAK,IAAjC,EAAuC;AACnC,aAAO,IAAP;AACH;;AAED,WAAO,UAACG,KAAD,EAAW;AACd,yBAAOJ,MAAP,EAAeI,KAAf;AACA,yBAAOH,MAAP,EAAeG,KAAf;AACH,KAHD;AAIH,GATM,EASJ,CAACJ,MAAD,EAASC,MAAT,CATI,CAAP;AAUH,CAXM","sourcesContent":["import React from 'react';\n\nimport { setRef } from '../utils';\n\nexport interface UseForkRefHook {\n    <T>(refOne: React.Ref<T>, refTwo: React.Ref<T>): React.Ref<T>;\n}\n\n/**\n * Позволяет переиспользовать объект `ref` внутри forwardRef.\n * @param {React.Ref<T>} refOne\n * @param {React.Ref<T>} refTwo\n * @return {Function React.Ref}\n */\nexport const useForkRef: UseForkRefHook = (refOne, refTwo) => {\n    return React.useMemo(() => {\n        if (refOne == null && refTwo === null) {\n            return null;\n        }\n\n        return (refOb) => {\n            setRef(refOne, refOb);\n            setRef(refTwo, refOb);\n        };\n    }, [refOne, refTwo]);\n};\n"],"file":"useForkRef.js"}