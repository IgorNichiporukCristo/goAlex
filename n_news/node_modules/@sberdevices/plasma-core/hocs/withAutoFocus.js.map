{"version":3,"sources":["../src/hocs/withAutoFocus.tsx"],"names":["withAutoFocus","Component","autoFocus","tabIndex","preventScroll","props","divRef","current","focus"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;;;AAQO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CACzBC,SADyB;AAAA,SAEU,gBAAkE;AAAA,QAA/DC,SAA+D,QAA/DA,SAA+D;AAAA,6BAApDC,QAAoD;AAAA,QAApDA,QAAoD,8BAAzC,CAAC,CAAwC;AAAA,kCAArCC,aAAqC;AAAA,QAArCA,aAAqC,mCAArB,IAAqB;AAAA,QAAZC,KAAY;;AACrG,QAAMC,MAAM,GAAG,mBAAuB,IAAvB,CAAf;AAEA,0BAAU,YAAM;AACZ,UAAIJ,SAAS,IAAII,MAAM,CAACC,OAAxB,EAAiC;AAC7BD,QAAAA,MAAM,CAACC,OAAP,CAAeC,KAAf,CAAqB;AAAEJ,UAAAA,aAAa,EAAbA;AAAF,SAArB;AACH;AACJ,KAJD;AAMA,wBAAO,gCAAC,SAAD;AAAW,MAAA,QAAQ,EAAED,QAArB;AAA+B,MAAA,GAAG,EAAEG;AAApC,OAAiDD,KAAjD,EAAP;AACH,GAZ4B;AAAA,CAAtB","sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nexport interface WithAutoFocusProps {\n    autoFocus?: boolean | null;\n    tabIndex?: number;\n    preventScroll?: boolean;\n}\n\nexport const withAutoFocus = <P extends object>(\n    Component: React.ComponentType<P>,\n): React.FC<P & WithAutoFocusProps> => ({ autoFocus, tabIndex = -1, preventScroll = true, ...props }) => {\n    const divRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (autoFocus && divRef.current) {\n            divRef.current.focus({ preventScroll });\n        }\n    });\n\n    return <Component tabIndex={tabIndex} ref={divRef} {...(props as P)} />;\n};\n"],"file":"withAutoFocus.js"}