{"version":3,"sources":["../../../src/components/Header/HeaderRoot.tsx"],"names":["React","styled","css","mediaQuery","Color","sizes","sberBox","sberPortal","mobile","StyledHeaderRoot","header","$size","theme","deviceScale","$gradientColor","alpha","string","StyledInner","div","HeaderRoot","children","size","gradientColor","rest"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,IAAiBC,GAAjB,QAA4B,mBAA5B;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,IAAMC,KAAK,GAAG;AACVC,EAAAA,OAAO,eAAEJ,GAAF,6FADG;AAMVK,EAAAA,UAAU,eAAEL,GAAF,6FANA;AAWVM,EAAAA,MAAM,eAAEN,GAAF;AAXI,CAAd;AAuBA,IAAMO,gBAAgB,gBAAGR,MAAM,CAACS,MAAV;AAAA;AAAA,kKAQhB;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,MAAUC,KAAV,QAAUA,KAAV;AAAA,SACED,KAAK,GACCN,KAAK,CAACM,KAAD,CADN,CACc;AADd,IAECT,GAFD,0BAGHC,UAAU,CAAC,GAAD,EAAMS,KAAK,CAACC,WAAZ,CAAV,CAAmCR,KAAK,CAACG,MAAzC,CAHG,EAIHL,UAAU,CAAC,GAAD,EAAMS,KAAK,CAACC,WAAZ,CAAV,CAAmCR,KAAK,CAACE,UAAzC,CAJG,EAKHJ,UAAU,CAAC,GAAD,EAAMS,KAAK,CAACC,WAAZ,CAAV,CAAmCR,KAAK,CAACC,OAAzC,CALG,EAMHH,UAAU,CAAC,IAAD,EAAOS,KAAK,CAACC,WAAb,CAAV,CAAoCR,KAAK,CAACC,OAA1C,CANG,CADP;AAAA,CARgB,EAkBhB;AAAA,MAAGQ,cAAH,SAAGA,cAAH;AAAA,SACEA,cAAc,IACdZ,GADc,sNAWAY,cAXA,EAYAV,KAAK,CAACU,cAAD,CAAL,CAAsBC,KAAtB,CAA4B,CAA5B,EAA+BC,MAA/B,EAZA,CADhB;AAAA,CAlBgB,CAAtB;AAoCA,IAAMC,WAAW,gBAAGhB,MAAM,CAACiB,GAAV;AAAA;AAAA,oGAAjB;;AA0BA;AACA;AACA;AACA,OAAO,IAAMC,UAAqC,GAAG,SAAxCA,UAAwC,QAAgD;AAAA,MAA7CC,QAA6C,SAA7CA,QAA6C;AAAA,MAAnCC,IAAmC,SAAnCA,IAAmC;AAAA,MAA7BC,aAA6B,SAA7BA,aAA6B;AAAA,MAAXC,IAAW;;AACjG,sBACI,oBAAC,gBAAD,eAAsBA,IAAtB;AAA4B,IAAA,KAAK,EAAEF,IAAnC;AAAyC,IAAA,cAAc,EAAEC;AAAzD,mBACI,oBAAC,WAAD,QAAcF,QAAd,CADJ,CADJ;AAKH,CANM","sourcesContent":["import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { mediaQuery } from '@sberdevices/plasma-core';\nimport Color from 'color';\n\nconst sizes = {\n    sberBox: css`\n        --plasma-header-height: 2.25rem; /* 36px */\n        --plasma-header-pt: 1.875rem; /* 30px */\n        --plasma-header-pb: 0.875rem; /* 14px */\n    `,\n    sberPortal: css`\n        --plasma-header-height: 2.25rem; /* 36px */\n        --plasma-header-pt: 1.625rem; /* 26px */\n        --plasma-header-pb: 0.625rem; /* 10px */\n    `,\n    mobile: css`\n        --plasma-header-height: 2.25rem; /* 36px */\n        --plasma-header-pt: 0.375rem; /* 6px */\n        --plasma-header-pb: 0.375rem; /* 6px */\n    `,\n};\n\ninterface StyledHeaderRootProps {\n    $size?: keyof typeof sizes;\n    $gradientColor?: string;\n}\n\nconst StyledHeaderRoot = styled.header<StyledHeaderRootProps>`\n    box-sizing: content-box;\n\n    width: 100%;\n    height: var(--plasma-header-height);\n    padding-top: var(--plasma-header-pt);\n    padding-bottom: var(--plasma-header-pb);\n\n    ${({ $size, theme }) =>\n        $size\n            ? sizes[$size] // Выберет указанный размер или разложит размеры по брейкпоинтам\n            : css`\n        ${mediaQuery('S', theme.deviceScale)(sizes.mobile)}\n        ${mediaQuery('M', theme.deviceScale)(sizes.sberPortal)}\n        ${mediaQuery('L', theme.deviceScale)(sizes.sberBox)}\n        ${mediaQuery('XL', theme.deviceScale)(sizes.sberBox)}\n    `}\n\n    ${({ $gradientColor }) =>\n        $gradientColor &&\n        css`\n            &::before {\n                content: '';\n                position: absolute;\n                top: 0;\n                left: 0;\n                right: 0;\n                height: calc(var(--plasma-header-height) + var(--plasma-header-pt) + var(--plasma-header-pb));\n                background-image: linear-gradient(\n                    180deg,\n                    ${$gradientColor},\n                    ${Color($gradientColor).alpha(0).string()}\n                );\n            }\n        `}\n`;\nconst StyledInner = styled.div`\n    position: relative;\n\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n\n    width: 100%;\n    height: 100%;\n`;\n\nexport interface HeaderRootProps extends React.HTMLAttributes<HTMLDivElement> {\n    /**\n     * Задать размер, зависимый от устройства.\n     * Если не задан, на каждом брейкпоинте будет свой размер.\n     */\n    size?: keyof typeof sizes;\n    /**\n     * Цвет для создания градиента сверху вниз.\n     * Указаный цвет займет верхнюю точку градента,\n     * а его, рассчитываемая программно, прозрачная версия - нижнюю.\n     * Можно использовать hex, rgb и rgba значения цвета.\n     */\n    gradientColor?: string;\n}\n\n/**\n * Корневой узел для шапки.\n */\nexport const HeaderRoot: React.FC<HeaderRootProps> = ({ children, size, gradientColor, ...rest }) => {\n    return (\n        <StyledHeaderRoot {...rest} $size={size} $gradientColor={gradientColor}>\n            <StyledInner>{children}</StyledInner>\n        </StyledHeaderRoot>\n    );\n};\n"],"file":"HeaderRoot.js"}