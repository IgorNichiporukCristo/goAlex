{"version":3,"sources":["../../../src/components/Device/DeviceDetection.tsx"],"names":["React","createGlobalStyle","ThemeProvider","sberPortal","sberBox","mobile","sberPortalScale","transformStyles","standard","compatible","detectDevice","deviceScales","transformWithRoot","typo","typoSizes","StandardTypo","CompatibleTypo","DeviceThemeProvider","theme","children","detectDeviceCallback","responsiveTypo","lowPerformance","deviceKind","deviceScale","Typo","useMemo"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,EAA4BC,aAA5B,QAAiD,mBAAjD;AACA,SAASC,UAAT,EAAqBC,OAArB,EAA8BC,MAA9B,EAAsCC,eAAtC,QAA6D,4BAA7D;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,0BAArC;AAEA,SAASC,YAAT,EAAuBC,YAAvB,QAAuD,aAAvD;AAEA;;AACA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,IAAD;AAAA,kCAEpBN,eAAe,CAACM,IAAI,CAAC,OAAD,CAAL,CAFK;AAAA,CAA1B;;AAIA,IAAMC,SAAS,GAAG;AACdV,EAAAA,OAAO,eAAEH,iBAAF,wBAAsBW,iBAAiB,CAACR,OAAD,CAAvC,CADO;AAEdD,EAAAA,UAAU,eAAEF,iBAAF,wBAAsBW,iBAAiB,CAACT,UAAD,CAAvC,CAFI;AAGdE,EAAAA,MAAM,eAAEJ,iBAAF,wBAAsBW,iBAAiB,CAACP,MAAD,CAAvC;AAHQ,CAAlB;AAKA;;AAEA,IAAMU,YAAY,gBAAGd,iBAAiB,CAACO,QAAD,CAAtC;AACA,IAAMQ,cAAc,gBAAGf,iBAAiB,CAACQ,UAAD,CAAxC;;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMQ,mBAA+C,GAAG,SAAlDA,mBAAkD,OAMzD;AAAA,MALFC,KAKE,QALFA,KAKE;AAAA,MAJFC,QAIE,QAJFA,QAIE;AAAA,mCAHFC,oBAGE;AAAA,MAHFA,oBAGE,sCAHqBV,YAGrB;AAAA,iCAFFW,cAEE;AAAA,MAFFA,cAEE,oCAFe,KAEf;AAAA,iCADFC,cACE;AAAA,MADFA,cACE,oCADe,KACf;AACF,MAAMC,UAAU,GAAGH,oBAAoB,EAAvC;AACA,MAAMI,WAAW,GAAGb,YAAY,CAACY,UAAD,CAAZ,IAA4BjB,eAAhD;AACA,MAAMmB,IAAI,GAAGzB,KAAK,CAAC0B,OAAN,CAAc;AAAA,WAAMZ,SAAS,CAACS,UAAD,CAAf;AAAA,GAAd,EAA2C,CAACA,UAAD,CAA3C,CAAb;AAEA,sBACI,oBAAC,aAAD;AAAe,IAAA,KAAK,kCAAOL,KAAP;AAAcM,MAAAA,WAAW,EAAXA,WAAd;AAA2BF,MAAAA,cAAc,EAAdA;AAA3B;AAApB,KACKD,cAAc,gBACX,uDACI,oBAAC,YAAD;AAAc,IAAA,WAAW,EAAEG;AAA3B,IADJ,eAEI,oBAAC,cAAD,OAFJ,CADW,gBAMX,oBAAC,IAAD,OAPR,EASKL,QATL,CADJ;AAaH,CAxBM","sourcesContent":["import React from 'react';\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\nimport { sberPortal, sberBox, mobile, sberPortalScale } from '@sberdevices/plasma-tokens';\nimport { transformStyles } from '@sberdevices/plasma-core';\nimport { standard, compatible } from '@sberdevices/plasma-typo';\n\nimport { detectDevice, deviceScales, DeviceKind } from '../../utils';\n\n/* stylelint-disable */\nconst transformWithRoot = (typo: typeof sberBox) => `\n:root {\n    ${transformStyles(typo[':root'])}\n}`;\nconst typoSizes = {\n    sberBox: createGlobalStyle`${transformWithRoot(sberBox)}`,\n    sberPortal: createGlobalStyle`${transformWithRoot(sberPortal)}`,\n    mobile: createGlobalStyle`${transformWithRoot(mobile)}`,\n};\n/* stylelint-enable */\n\nconst StandardTypo = createGlobalStyle(standard);\nconst CompatibleTypo = createGlobalStyle(compatible);\n\nexport interface DeviceThemeProps {\n    /**\n     * Объект темы для стилизованных компонентов.\n     *\n     * Внутри `DeviceThemeProvider` использует `styled-components/ThemeProvider`\n     * и расширяет объект темы полем `deviceScale`.\n     */\n    theme?: object;\n    /**\n     * Пользовательская функция определения устройства.\n     *\n     * Должна возвращать 3 возможных значения - `sberBox` или `sberPortal` или `mobile`.\n     *\n     * Возвращаемое значение  по умолчанию - `sberBox`.\n     *\n     * При значениях `sberBox` и `sberPortal` типографика примет размер **x2**, а при `mobile` - **x1**.\n     */\n    detectDeviceCallback?: () => DeviceKind;\n    responsiveTypo?: boolean;\n    /**\n     * Флаг для отключения анимаций и прочих твиков над UI, снижающих производительность.\n     */\n    lowPerformance?: boolean;\n}\n\n/**\n * Провайдер обязателен для использования, необходимо обернуть в него все приложение.\n *\n * Назначение - определяет, на какой *поверхности* (**устройстве**) запущено приложение.\n *\n * В зависимости от поверхности, применяет глобальные стили типографики,\n * подходящие данной платформе, ко всему приложению.\n *\n * Функцией определения по умолчанию тип поверхности определяется на основании `userAgent`,\n * при отсутствии `navigator` или `userAgent`, поверхность будет определен как `sberBox`.\n *\n * Имеется возможность передать провайдеру собственную логику определения девайса\n * с помощью пропса `detectDeviceCallback`.\n * При этом стоит помнить, что разрешены только 3 стандартных значения.\n */\nexport const DeviceThemeProvider: React.FC<DeviceThemeProps> = ({\n    theme,\n    children,\n    detectDeviceCallback = detectDevice,\n    responsiveTypo = false,\n    lowPerformance = false,\n}) => {\n    const deviceKind = detectDeviceCallback();\n    const deviceScale = deviceScales[deviceKind] || sberPortalScale;\n    const Typo = React.useMemo(() => typoSizes[deviceKind], [deviceKind]);\n\n    return (\n        <ThemeProvider theme={{ ...theme, deviceScale, lowPerformance }}>\n            {responsiveTypo ? (\n                <>\n                    <StandardTypo deviceScale={deviceScale} />\n                    <CompatibleTypo />\n                </>\n            ) : (\n                <Typo />\n            )}\n            {children}\n        </ThemeProvider>\n    );\n};\n"],"file":"DeviceDetection.js"}