var _excluded = ["index", "axis", "scrollSnapType", "scrollAlign", "detectActive", "detectThreshold", "scaleCallback", "scaleResetCallback", "onScroll", "onIndexChange", "onDetectActiveItem", "paddingStart", "paddingEnd", "throttleMs", "debounceMs", "animatedScrollByIndex", "listRole", "listAriaLabel", "children"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import styled from 'styled-components';
import { useCarousel, CarouselContext, Carousel as BaseCarousel, CarouselTrack as BaseTrack, applyNoSelect } from '@sberdevices/plasma-core';
import { useForkRef } from '../../hooks';
var StyledCarousel = /*#__PURE__*/styled(BaseCarousel).withConfig({
  componentId: "plasma-ui__sc-tuilh3-0"
})([""]);
var StyledCarouselTrack = /*#__PURE__*/styled(BaseTrack).withConfig({
  componentId: "plasma-ui__sc-tuilh3-1"
})(["", ";"], applyNoSelect);
/**
 * Компонент для создания списков с прокруткой.
 */
// eslint-disable-next-line prefer-arrow-callback

export var Carousel = /*#__PURE__*/React.forwardRef(function Carousel(_ref, ref) {
  var _ref$index = _ref.index,
      index = _ref$index === void 0 ? 0 : _ref$index,
      _ref$axis = _ref.axis,
      axis = _ref$axis === void 0 ? 'x' : _ref$axis,
      _ref$scrollSnapType = _ref.scrollSnapType,
      scrollSnapType = _ref$scrollSnapType === void 0 ? 'mandatory' : _ref$scrollSnapType,
      scrollAlign = _ref.scrollAlign,
      detectActive = _ref.detectActive,
      detectThreshold = _ref.detectThreshold,
      scaleCallback = _ref.scaleCallback,
      scaleResetCallback = _ref.scaleResetCallback,
      onScroll = _ref.onScroll,
      onIndexChange = _ref.onIndexChange,
      onDetectActiveItem = _ref.onDetectActiveItem,
      paddingStart = _ref.paddingStart,
      paddingEnd = _ref.paddingEnd,
      throttleMs = _ref.throttleMs,
      debounceMs = _ref.debounceMs,
      animatedScrollByIndex = _ref.animatedScrollByIndex,
      listRole = _ref.listRole,
      listAriaLabel = _ref.listAriaLabel,
      children = _ref.children,
      rest = _objectWithoutProperties(_ref, _excluded);

  var _useCarousel = useCarousel({
    index: index,
    axis: axis,
    scrollAlign: scrollAlign,
    detectActive: detectActive,
    detectThreshold: detectThreshold,
    scaleCallback: scaleCallback,
    scaleResetCallback: scaleResetCallback,
    onScroll: onScroll,
    onIndexChange: onIndexChange,
    onDetectActiveItem: onDetectActiveItem,
    throttleMs: throttleMs,
    debounceMs: debounceMs,
    animatedScrollByIndex: animatedScrollByIndex
  }),
      scrollRef = _useCarousel.scrollRef,
      trackRef = _useCarousel.trackRef,
      refs = _useCarousel.refs,
      handleScroll = _useCarousel.handleScroll;

  var handleRef = useForkRef(scrollRef, ref);
  return /*#__PURE__*/React.createElement(CarouselContext.Provider, {
    value: {
      axis: axis,
      refs: refs
    }
  }, /*#__PURE__*/React.createElement(StyledCarousel, _extends({
    ref: handleRef,
    axis: axis,
    scrollSnapType: scrollSnapType,
    onScroll: handleScroll
  }, rest), /*#__PURE__*/React.createElement(StyledCarouselTrack, {
    ref: trackRef,
    axis: axis,
    paddingStart: paddingStart,
    paddingEnd: paddingEnd,
    role: listRole,
    "aria-label": listAriaLabel
  }, children)));
});
//# sourceMappingURL=Carousel.js.map