{"version":3,"sources":["../../../src/components/Pickers/utils.ts"],"names":["useEffect","useRef","sizes","l","scale","offset","height","s","xs","round","n","Math","MAX_SLOT","FULL_OPACITY","NONE_OPACITY","getOpacity","slot","absoluteSlot","abs","ceilSlot","ceil","progSlot","opacityRangeSize","opacity","getOffset","size","shift","sign","getScale","getStyles","normalizedSlot","min","wrapper","transform","text","whiteText","scaleCallback","itemEl","styles","children","HTMLElement","style","scaleCallbacks","scaleResetCallback","transformable","getTimeValues","date","getHours","getMinutes","getSeconds","getDateValues","getFullYear","getMonth","getDate","isChanged","oldValues","newValues","length","i","getNormalizeValues","getValues","current","max","curValues","minValues","maxValues","curSeconds","minSeconds","maxSeconds","usePreviousValue","value","ref"],"mappings":"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","sourcesContent":["import { useEffect, useRef } from 'react';\n\nimport { PickerSize } from './types';\n\ninterface PickerItemScale {\n    /**\n     * Размер (transform: scale) при slot = 0, 1, 2.\n     */\n    scale: number[];\n    /**\n     * Коэффициент смещения по oY.\n     */\n    offset: number;\n    /**\n     * Высота элемента.\n     */\n    height: number;\n}\n\nconst sizes: Record<PickerSize, PickerItemScale> = {\n    l: {\n        scale: [1, 0.8, 0.8],\n        offset: -0.15,\n        height: 5,\n    },\n    s: {\n        scale: [1, 0.75, 0.5],\n        offset: 0.35,\n        height: 2.875,\n    },\n    xs: {\n        scale: [1, 0.8334, 0.5834],\n        offset: 0.35,\n        height: 2.05,\n    },\n};\n\nconst round = (n: number) => Math.round(n * 100) / 100;\n\n// 0 - Infinity\nconst MAX_SLOT = 3;\n// 0 - 1\nconst FULL_OPACITY = 1;\nconst NONE_OPACITY = 0;\n\nexport function getOpacity(slot: number) {\n    const absoluteSlot = Math.abs(slot);\n    const ceilSlot = Math.ceil(absoluteSlot) || 1; // Ячейка, в которую перемещается элемент\n\n    // Сколько осталось от размера ячкейки, чтобы элемент занял ее полностью (от 1 до 0)\n    const progSlot = ceilSlot - absoluteSlot;\n\n    if (absoluteSlot <= 1) {\n        const opacityRangeSize = FULL_OPACITY - NONE_OPACITY;\n        const opacity = NONE_OPACITY + progSlot * opacityRangeSize;\n        return round(opacity);\n    }\n    return NONE_OPACITY;\n}\n\nexport function getOffset(slot: number, size: PickerSize) {\n    const absoluteSlot = Math.abs(slot);\n    const ceilSlot = Math.ceil(absoluteSlot) || 1; // Ячейка, в которую перемещается элемент\n\n    // Сколько осталось от размера ячкейки, чтобы элемент занял ее полностью (от 1 до 0)\n    const progSlot = ceilSlot - absoluteSlot;\n\n    const shift = (sizes[size].offset * sizes[size].height) / 2;\n\n    // От середины до 1 ячейки\n    if (absoluteSlot <= 1) {\n        return round(slot * shift) || 0;\n    }\n\n    // От 1 ячейки до 2\n    if (absoluteSlot <= 2) {\n        return round(progSlot * shift * Math.sign(slot));\n    }\n\n    // От 2 ячейки\n    return round(((absoluteSlot - 2) / (ceilSlot - 2)) * Math.sign(slot) * -1 * Math.abs(sizes[size].height));\n}\n\nexport function getScale(slot: number, size: PickerSize) {\n    const absoluteSlot = Math.abs(slot);\n    const ceilSlot = Math.ceil(absoluteSlot) || 1; // Ячейка, в которую перемещается элемент\n\n    // Сколько осталось от размера ячкейки, чтобы элемент занял ее полностью (от 1 до 0)\n    const progSlot = ceilSlot - absoluteSlot;\n\n    // От середины до 1 ячейки\n    if (absoluteSlot <= 1) {\n        return round(progSlot * (sizes[size].scale[0] - sizes[size].scale[1]) + sizes[size].scale[1]);\n    }\n\n    // От 1 ячейки до 2\n    if (absoluteSlot <= 2) {\n        return round(progSlot * (sizes[size].scale[1] - sizes[size].scale[2]) + sizes[size].scale[2]);\n    }\n\n    // От 2 ячейки\n    return round(progSlot * sizes[size].scale[2]);\n}\n\n/**\n * Абстрактный просчет стилей в зависимости от слота,\n * не основываясь на реальном элементе списка.\n */\nexport const getStyles = (slot: number, size: PickerSize) => {\n    const normalizedSlot = Math.min(Math.abs(slot), MAX_SLOT) * Math.sign(slot);\n    const opacity = getOpacity(normalizedSlot);\n    const offset = getOffset(normalizedSlot, size);\n    const scale = getScale(normalizedSlot, size);\n\n    return {\n        wrapper: {\n            /*\n             * Размер плавно уменьшается с увеличением значения slot\n             */\n            transform: `scale(${scale}) translate3d(0,${offset}rem,0)`,\n        },\n        text: {\n            /*\n             * Непрозрачность уменьшается с увеличением значения slot\n             */\n            opacity: `${1 - opacity}`,\n        },\n        whiteText: {\n            /*\n             * Непрозрачность увеличивается с увеличением значения slot\n             */\n            opacity: `${opacity}`,\n        },\n    };\n};\n\n/**\n * Малый размер => большой размер\n * Серый текст => белый текст\n */\nconst scaleCallback = (size: PickerSize) => (itemEl: HTMLElement, slot: number) => {\n    const styles = getStyles(slot, size);\n\n    if (itemEl.children[0] instanceof HTMLElement) {\n        const wrapper = itemEl.children[0];\n        wrapper.style.transform = styles.wrapper.transform;\n\n        /**\n         * Серый текст\n         */\n        if (wrapper.children[0] instanceof HTMLElement) {\n            wrapper.children[0].style.opacity = styles.text.opacity;\n        }\n        /**\n         * Белый текст\n         */\n        if (wrapper.children[1] instanceof HTMLElement) {\n            wrapper.children[1].style.opacity = styles.whiteText.opacity;\n        }\n    }\n};\n\nexport const scaleCallbacks = {\n    l: scaleCallback('l'),\n    s: scaleCallback('s'),\n    xs: scaleCallback('xs'),\n};\n\n/**\n * Сброс стилей\n */\nexport const scaleResetCallback = (itemEl: HTMLElement) => {\n    if (itemEl.children[0] instanceof HTMLElement) {\n        const transformable = itemEl.children[0];\n        transformable.style.transform = '';\n\n        if (transformable.children[0] instanceof HTMLElement) {\n            transformable.children[0].style.opacity = '';\n        }\n        if (transformable.children[1] instanceof HTMLElement) {\n            transformable.children[1].style.opacity = '';\n        }\n    }\n};\n\n/**\n * Вернет массив с временными компонентами переданной даты.\n */\nexport const getTimeValues = (date: Date) => [date.getHours(), date.getMinutes(), date.getSeconds()] as const;\n\n/**\n * Вернет массив компонентами даты.\n */\nexport const getDateValues = (date: Date) => [date.getFullYear(), date.getMonth(), date.getDate()] as const;\n\n/**\n * Проверит, изменился ли массив\n */\nexport const isChanged = (oldValues: readonly number[], newValues: readonly number[]) => {\n    if (oldValues === newValues) {\n        return false;\n    }\n\n    if (oldValues.length !== newValues.length) {\n        return true;\n    }\n\n    for (let i = 0; i < oldValues.length; i++) {\n        if (oldValues[i] !== newValues[i]) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n/**\n * Вернёт нормализованные значения в заданных пределах\n */\nexport const getNormalizeValues = (\n    getValues: (date: Date) => readonly [number, number, number],\n    getSeconds: (values: readonly [number, number, number]) => number,\n) => (current: Date, min: Date, max: Date) => {\n    const curValues = getValues(current);\n    const minValues = getValues(min);\n    const maxValues = getValues(max);\n\n    const curSeconds = getSeconds(curValues);\n    const minSeconds = getSeconds(minValues);\n    const maxSeconds = getSeconds(maxValues);\n\n    if (curSeconds < minSeconds) {\n        return minValues;\n    }\n\n    if (curSeconds > maxSeconds) {\n        return maxValues;\n    }\n\n    return curValues;\n};\n\n/**\n * Хук для сохранения предыдущего значения\n */\nexport const usePreviousValue = (value: string | number | Date) => {\n    const ref = useRef<string | number | Date>();\n\n    useEffect(() => {\n        ref.current = value;\n    });\n\n    return ref.current;\n};\n"],"file":"utils.js"}