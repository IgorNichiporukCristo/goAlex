{"version":3,"sources":["../../src/components/Pickers/TimePicker.tsx"],"names":["StyledWrapper","styled","div","defaultOptions","hours","minutes","seconds","getRange","from","to","step","range","i","push","getClosestValue","value","weights","map","indexOf","Math","max","getSeconds","getValuesInRange","hoursRange","minsRange","secsRange","newHours","newMins","newSecs","isNaN","Error","TimePicker","id","options","size","min","disabled","controls","autofocus","scrollSnapType","visibleItems","onChange","name","enableNativeControl","secondsAriaLabel","minutesAriaLabel","hoursAriaLabel","infiniteScroll","rest","normalizeValues","React","useMemo","getTimeValues","useState","setState","minHours","minMinutes","minSeconds","maxHours","maxMinutes","maxSeconds","minMins","maxMins","minSecs","maxSecs","hoursStep","minsStep","secsStep","hoursMod","minsMod","onHoursChange","useCallback","h","m","s","onMinutesChange","onSecondsChange","oldTime","newValue","Date","setHours","setMinutes","setSeconds","prevTime","newTime","toISOString"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { useIsomorphicLayoutEffect } from '@sberdevices/plasma-core';\n\nimport { PickerDots } from './PickerDots';\nimport { SimpleTimePicker, SimpleTimePickerProps } from './SimpleTimePicker';\nimport { getNormalizeValues, getTimeValues, isChanged } from './utils';\nimport type { TimeType } from './types';\n\nconst StyledWrapper = styled.div`\n    display: flex;\n    width: max-content;\n    align-items: stretch;\n`;\n\nconst defaultOptions = {\n    hours: true,\n    minutes: true,\n    seconds: true,\n};\n\n/**\n * Вернет массив чисел от `from` до `to` с интервалом `step`.\n */\nconst getRange = (from: number, to: number, step: number) => {\n    const range = [];\n    for (let i = from; i <= to; i += step) {\n        range.push(i);\n    }\n    return range;\n};\n\n/**\n * Сравнит число с массивом чисел и вернет значение массива,\n * максимальное близкое заданному числу.\n */\nconst getClosestValue = (range: number[], value: number) => {\n    if (value === 0) {\n        return range[0];\n    }\n    const weights = range.map((i) => (value <= i ? value / i : i / value));\n    return range[weights.indexOf(Math.max(...weights))];\n};\n\n/**\n * Вернёт секунды\n */\nconst getSeconds = ([hours, minutes, seconds]: TimeType) => hours * 60 * 60 + minutes * 60 + seconds;\n\n/**\n * Для того, чтобы значение не выпадало из диапозона,\n * надо выставить в соответствии с последним\n */\nconst getValuesInRange = (\n    [hoursRange, minsRange, secsRange]: number[][],\n    [hours, minutes, seconds]: number[],\n    value: Date,\n) => {\n    if (hoursRange.indexOf(hours) === -1 || minsRange.indexOf(minutes) === -1 || secsRange.indexOf(seconds) === -1) {\n        const newHours = hoursRange.indexOf(hours) === -1 ? getClosestValue(hoursRange, hours) : hours;\n        const newMins = minsRange.indexOf(minutes) === -1 ? getClosestValue(minsRange, minutes) : minutes;\n        const newSecs = secsRange.indexOf(seconds) === -1 ? getClosestValue(secsRange, seconds) : seconds;\n\n        // eslint-disable-next-line no-restricted-globals\n        if (isNaN(newHours) || isNaN(newMins) || isNaN(newSecs)) {\n            throw new Error(`Passed value ${value} is out of range`);\n        }\n\n        return [newHours, newMins, newSecs] as const;\n    }\n\n    return [hours, minutes, seconds] as const;\n};\n\nexport interface TimePickerProps extends Omit<SimpleTimePickerProps, 'type' | 'range' | 'onChange'> {\n    /**\n     * Обработчик изменения\n     */\n    onChange?: (value: Date) => void;\n    /**\n     * Значение контрола\n     */\n    value: Date;\n    /**\n     * Максимальное значение даты\n     */\n    max: Date;\n    /**\n     * Минимальное значение даты\n     */\n    min: Date;\n    /**\n     * Формат выводимого значения\n     */\n    options?: typeof defaultOptions;\n    /**\n     * Интервалы в секундах.\n     * @example:\n     * 7200 = интервал в 2 часа\n     * 300 = интервал в 5 минут\n     * 5 = интервал в 5 секунд\n     * 7505 = интервалы 2 часа, 5 минут, 5 секунд\n     */\n    step?: number;\n    /**\n     * Сменить WAI-ARIA Label списка дней.\n     */\n    secondsAriaLabel?: string;\n    /**\n     * Сменить WAI-ARIA Label списка месяцев.\n     */\n    minutesAriaLabel?: string;\n    /**\n     * Сменить WAI-ARIA Label списка годов.\n     */\n    hoursAriaLabel?: string;\n}\n\n/**\n * Компонент для выбора времени.\n */\nexport const TimePicker: React.FC<TimePickerProps> = ({\n    id,\n    options = defaultOptions,\n    step,\n    size,\n    value,\n    min,\n    max,\n    disabled,\n    controls,\n    autofocus,\n    scrollSnapType,\n    visibleItems,\n    onChange,\n    name,\n    enableNativeControl,\n    secondsAriaLabel,\n    minutesAriaLabel,\n    hoursAriaLabel,\n    infiniteScroll,\n    ...rest\n}) => {\n    const normalizeValues = React.useMemo(() => getNormalizeValues(getTimeValues, getSeconds)(value, min, max), [\n        value,\n        min,\n        max,\n    ]);\n\n    const [[hours, minutes, seconds], setState] = React.useState(normalizeValues);\n    const [minHours, minMinutes, minSeconds] = getTimeValues(min);\n    const [maxHours, maxMinutes, maxSeconds] = getTimeValues(max);\n\n    // Диапазоны для списков зависят от min и max,\n    // при чем min и max принимаются как возможные предельные значения,\n    // а не как контейнеры для компонент hours, minutes, seconds\n    const [hoursRange, minsRange, secsRange] = React.useMemo(() => {\n        let minMins = 0;\n        let maxMins = 59;\n        let minSecs = 0;\n        let maxSecs = 59;\n\n        if (hours === minHours) {\n            minMins = minMinutes;\n        }\n\n        if (hours === maxHours) {\n            maxMins = maxMinutes;\n        }\n\n        if (hours === minHours && minutes === minMinutes) {\n            minSecs = minSeconds;\n        }\n\n        if (hours === maxHours && minutes === maxMinutes) {\n            maxSecs = maxSeconds;\n        }\n\n        let hoursStep = 1;\n        let minsStep = 1;\n        let secsStep = 1;\n\n        if (step) {\n            const hoursMod = step % 3600;\n            const minsMod = hoursMod % 60;\n            hoursStep = (step - hoursMod) / 3600 || 1;\n            minsStep = (hoursMod - minsMod) / 60 || 1;\n            secsStep = minsMod || 1;\n        }\n\n        return [\n            getRange(minHours, maxHours, hoursStep),\n            getRange(minMins, maxMins, minsStep),\n            getRange(minSecs, maxSecs, secsStep),\n        ];\n    }, [minHours, maxHours, minMinutes, maxMinutes, minSeconds, maxSeconds, hours, minutes, step]);\n\n    const onHoursChange = React.useCallback(({ value: h }) => setState(([, m, s]) => [h, m, s]), []);\n    const onMinutesChange = React.useCallback(({ value: m }) => setState(([h, , s]) => [h, m, s]), []);\n    const onSecondsChange = React.useCallback(({ value: s }) => setState(([h, m]) => [h, m, s]), []);\n\n    // При очередном прогоне, если значения hours, minutes, seconds изменились,\n    // необходимо вызвать событие изменения, создав новый экземпляр Date\n    useIsomorphicLayoutEffect(() => {\n        const oldTime = normalizeValues;\n\n        if (onChange && isChanged(oldTime, [hours, minutes, seconds])) {\n            const newValue = new Date(value);\n            newValue.setHours(hours);\n            newValue.setMinutes(minutes);\n            newValue.setSeconds(seconds);\n\n            onChange(newValue);\n        }\n    }, [hours, minutes, seconds]);\n\n    /**\n     * Если значение value обновилось извне, необходимо изменить стейт\n     * и вызвать событие изменения, создав новый экземпляр Date\n     */\n    useIsomorphicLayoutEffect(() => {\n        setState((prevTime) => {\n            const [newHours, newMins, newSecs] = normalizeValues;\n\n            if (!isChanged(prevTime, [newHours, newMins, newSecs])) {\n                return prevTime;\n            }\n\n            if (onChange) {\n                const newValue = new Date(value);\n                newValue.setHours(newHours);\n                newValue.setMinutes(newMins);\n                newValue.setSeconds(newSecs);\n\n                onChange(newValue);\n            }\n\n            return [newHours, newMins, newSecs];\n        });\n    }, [value, normalizeValues, min, max]);\n\n    const newTime = getValuesInRange([hoursRange, minsRange, secsRange], [hours, minutes, seconds], value);\n    if (isChanged([hours, minutes, seconds], newTime)) {\n        setState(newTime);\n    }\n\n    return (\n        <StyledWrapper id={id} {...rest}>\n            {options.hours && (\n                <SimpleTimePicker\n                    id={id}\n                    type=\"hours\"\n                    autofocus={autofocus}\n                    disabled={disabled}\n                    controls={controls}\n                    visibleItems={visibleItems}\n                    size={size}\n                    range={hoursRange}\n                    value={hours}\n                    scrollSnapType={scrollSnapType}\n                    infiniteScroll={infiniteScroll}\n                    onChange={onHoursChange}\n                    aria-label={hoursAriaLabel}\n                />\n            )}\n            {options.hours && options.minutes && <PickerDots $size={size} />}\n            {options.minutes && (\n                <SimpleTimePicker\n                    id={id}\n                    type=\"minutes\"\n                    autofocus={autofocus && !options.hours}\n                    disabled={disabled}\n                    controls={controls}\n                    visibleItems={visibleItems}\n                    size={size}\n                    range={minsRange}\n                    value={minutes}\n                    scrollSnapType={scrollSnapType}\n                    infiniteScroll={infiniteScroll}\n                    onChange={onMinutesChange}\n                    aria-label={minutesAriaLabel}\n                />\n            )}\n            {options.minutes && options.seconds && <PickerDots $size={size} />}\n            {options.seconds && (\n                <SimpleTimePicker\n                    id={id}\n                    type=\"seconds\"\n                    autofocus={autofocus && !options.hours && !options.minutes}\n                    disabled={disabled}\n                    controls={controls}\n                    visibleItems={visibleItems}\n                    size={size}\n                    range={secsRange}\n                    value={seconds}\n                    scrollSnapType={scrollSnapType}\n                    infiniteScroll={infiniteScroll}\n                    onChange={onSecondsChange}\n                    aria-label={secondsAriaLabel}\n                />\n            )}\n            {enableNativeControl && <input type=\"hidden\" value={value.toISOString()} name={name} />}\n        </StyledWrapper>\n    );\n};\n"],"file":"TimePicker.js"}