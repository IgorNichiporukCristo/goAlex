{"version":3,"sources":["../../src/components/Pickers/PickerItem.tsx"],"names":["sizes","l","display2","padding","s","headline1","fontWeight","xs","headline2","StyledPickerItem","styled","div","tertiary","$noScrollBehavior","css","isSnapAlwaysStop","$size","StyledTransformable","theme","lowPerformance","StyledText","span","StyledWhiteText","secondary","PickerItem","size","item","index","activeIndex","noScrollBehavior","onItemClick","autofocus","rest","itemRef","styles","React","useMemo","onClick","useCallback","current","focus","wrapper","text","label","whiteText"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport styled, { css, CSSObject } from 'styled-components';\nimport { secondary, tertiary, display2, headline1, headline2 } from '@sberdevices/plasma-tokens';\n\nimport { useCarouselItem } from '../Carousel';\n\nimport type { SizeProps, PickerSize, PickerItem as PickerItemType } from './types';\nimport { getStyles } from './utils';\n\nconst sizes: Record<PickerSize, CSSObject> = {\n    l: {\n        ...display2,\n        padding: '0.5rem 0',\n    },\n    s: {\n        ...headline1,\n        fontWeight: 600,\n        padding: 0,\n    },\n    xs: {\n        ...headline2,\n        padding: 0,\n    },\n};\n\ninterface StyledSizeProps {\n    $size: keyof typeof sizes;\n    $noScrollBehavior: boolean;\n    isSnapAlwaysStop?: boolean;\n}\n\nexport const StyledPickerItem = styled.div<StyledSizeProps>`\n    position: relative;\n    box-sizing: border-box;\n    overflow: hidden;\n    display: flex;\n    align-items: center;\n    text-align: center;\n    width: 100%;\n\n    color: ${tertiary};\n\n    cursor: pointer;\n    user-select: none;\n\n    ${({ $noScrollBehavior }) =>\n        !$noScrollBehavior &&\n        css`\n            scroll-snap-align: center;\n        `}\n\n    &:focus {\n        outline: 0 none;\n        background: none;\n    }\n\n    ${({ isSnapAlwaysStop }) =>\n        isSnapAlwaysStop &&\n        css`\n            scroll-snap-stop: always;\n        `}\n\n    ${({ $size }) => sizes[$size]}\n`;\n\nconst StyledTransformable = styled.div<StyledSizeProps>`\n    width: 100%;\n    height: 100%;\n\n    flex-direction: column;\n\n    ${({ $noScrollBehavior }) =>\n        !$noScrollBehavior &&\n        css`\n            transition: ${({ theme }) => (theme.lowPerformance ? 'unset' : 'transform 0.1s ease')};\n            transform: translate3d(0, 0, 0);\n        `}\n`;\n\nconst StyledText = styled.span`\n    transform: translate3d(0, 0, 0);\n`;\n\nexport const StyledWhiteText = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    color: ${secondary};\n`;\n\nexport interface PickerItemProps extends React.HTMLAttributes<HTMLDivElement>, SizeProps {\n    item: PickerItemType;\n    index: number;\n    activeIndex: number;\n    noScrollBehavior: boolean;\n    onItemClick?: (item: PickerItemType) => void;\n    /**\n     * Автофокус на компоненте.\n     */\n    autofocus?: boolean;\n    /**\n     * Останавливает прокрутку скролла на выбранном элементе\n     *\n     * @example\n     * Например, исходный массив: [0,1,2,3,0,1,2,3,0,1,2,3], и активный индекс <5> (т.е. число 1)\n     * тогда, при сильном свайпе вниз скролл остановится на элементе с индексом <2> (и числом 2),\n     * и перебросит на элемент с индексом <6> (т.е. числом 2)\n     */\n    isSnapAlwaysStop?: boolean;\n}\n\nexport const PickerItem: React.FC<PickerItemProps> = ({\n    size = 's',\n    item,\n    index,\n    activeIndex,\n    noScrollBehavior,\n    onItemClick,\n    autofocus,\n    ...rest\n}) => {\n    const itemRef = useCarouselItem<HTMLDivElement>();\n    /*\n     * Выведем стили еще до того, как отработает коллбек стилей.\n     * Тут важно, что для `slot` идут целочисленные значения.\n     */\n    const styles = React.useMemo(() => getStyles(index - activeIndex, size), [index, activeIndex, size]);\n\n    const onClick = React.useCallback(() => {\n        onItemClick?.(item);\n    }, [item]);\n\n    useEffect(() => {\n        if (autofocus && itemRef.current) {\n            itemRef.current.focus();\n        }\n    }, [autofocus]);\n\n    return (\n        <StyledPickerItem $noScrollBehavior={noScrollBehavior} ref={itemRef} $size={size} onClick={onClick} {...rest}>\n            <StyledTransformable $noScrollBehavior={noScrollBehavior} $size={size} style={styles.wrapper}>\n                <StyledText style={styles.text}>{item.label}</StyledText>\n                <StyledWhiteText style={styles.whiteText} aria-hidden=\"true\">\n                    {item.label}\n                </StyledWhiteText>\n            </StyledTransformable>\n        </StyledPickerItem>\n    );\n};\n"],"file":"PickerItem.js"}