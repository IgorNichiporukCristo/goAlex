{"version":3,"sources":["../../src/components/Pickers/DatePicker.tsx"],"names":["defaultOptions","years","months","days","shortMonthName","getMaxDayInMonth","month","year","Date","getDate","getSeconds","day","getTime","StyledWrapper","styled","div","DatePicker","id","options","size","value","max","min","disabled","controls","autofocus","visibleItems","scrollSnapType","onChange","name","enableNativeControl","dayAriaLabel","daysAriaLabel","monthAriaLabel","monthsAriaLabel","yearAriaLabel","yearsAriaLabel","infiniteScroll","rest","normalizeValues","React","useMemo","getDateValues","useState","setState","minYear","minMonth","minDay","maxYear","maxMonth","maxDay","monthsInterval","daysInterval","maxDayInMonth","getNextMonth","useCallback","currentMonth","currentYear","getNextDay","nextDay","nextMonth","nextYear","possibleMaxDayInMonth","onYearChange","y","m","d","onMonthChange","onDayChange","oldDate","prevDate","newDate","newYear","newMonth","newDay","getOption","key","daysOption","monthsOption","yearsOption","shortMonthNameOption","monthNameFormat","toISOString"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAMA,cAAc,GAAG;AACnBC,EAAAA,KAAK,EAAE,IADY;AAEnBC,EAAAA,MAAM,EAAE,IAFW;AAGnBC,EAAAA,IAAI,EAAE,IAHa;AAInBC,EAAAA,cAAc,EAAE;AAJG,CAAvB;AAOA;AACA;AACA;;AACA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAgBC,IAAhB;AAAA,SAAyC,IAAIC,IAAJ,CAASD,IAAT,EAAeD,KAAK,GAAG,CAAvB,EAA0B,CAA1B,EAA6BG,OAA7B,EAAzC;AAAA,CAAzB;AAEA;AACA;AACA;;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA,MAAEH,IAAF;AAAA,MAAQD,KAAR;AAAA,MAAeK,GAAf;;AAAA,SAAkC,IAAIH,IAAJ,CAASD,IAAT,EAAeD,KAAf,EAAsBK,GAAtB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,CAAjC,EAAoCC,OAApC,EAAlC;AAAA,CAAnB;;AAEA,IAAMC,aAAa,gBAAGC,6BAAOC,GAAV;AAAA;AAAA,uCAAnB;;AAwCA;AACA;AACA;AACO,IAAMC,UAAqC,GAAG,SAAxCA,UAAwC,QAoB/C;AAAA,MAnBFC,EAmBE,SAnBFA,EAmBE;AAAA,4BAlBFC,OAkBE;AAAA,MAlBFA,OAkBE,8BAlBQlB,cAkBR;AAAA,MAjBFmB,IAiBE,SAjBFA,IAiBE;AAAA,MAhBFC,KAgBE,SAhBFA,KAgBE;AAAA,MAfFC,GAeE,SAfFA,GAeE;AAAA,MAdFC,GAcE,SAdFA,GAcE;AAAA,MAbFC,QAaE,SAbFA,QAaE;AAAA,MAZFC,QAYE,SAZFA,QAYE;AAAA,MAXFC,SAWE,SAXFA,SAWE;AAAA,MAVFC,YAUE,SAVFA,YAUE;AAAA,MATFC,cASE,SATFA,cASE;AAAA,MARFC,QAQE,SARFA,QAQE;AAAA,MAPFC,IAOE,SAPFA,IAOE;AAAA,MANFC,mBAME,SANFA,mBAME;AAAA,MALaC,YAKb,SALFC,aAKE;AAAA,MAJeC,cAIf,SAJFC,eAIE;AAAA,MAHcC,aAGd,SAHFC,cAGE;AAAA,MAFFC,cAEE,SAFFA,cAEE;AAAA,MADCC,IACD;;AACF,MAAMC,eAAe,GAAGC,kBAAMC,OAAN,CAAc;AAAA,WAAM,+BAAmBC,oBAAnB,EAAkChC,UAAlC,EAA8CU,KAA9C,EAAqDE,GAArD,EAA0DD,GAA1D,CAAN;AAAA,GAAd,EAAoF,CACxGD,KADwG,EAExGE,GAFwG,EAGxGD,GAHwG,CAApF,CAAxB;;AAMA,wBAAuCmB,kBAAMG,QAAN,CAAeJ,eAAf,CAAvC;AAAA;AAAA;AAAA,MAAQhC,IAAR;AAAA,MAAcD,KAAd;AAAA,MAAqBK,GAArB;AAAA,MAA2BiC,QAA3B;;AACA,uBAAoC,0BAActB,GAAd,CAApC;AAAA;AAAA,MAAOuB,OAAP;AAAA,MAAgBC,QAAhB;AAAA,MAA0BC,MAA1B;;AACA,wBAAoC,0BAAc1B,GAAd,CAApC;AAAA;AAAA,MAAO2B,OAAP;AAAA,MAAgBC,QAAhB;AAAA,MAA0BC,MAA1B;;AAEA,MAAMC,cAAc,GAAGX,kBAAMC,OAAN,CAAc,YAAM;AACvC,QAAII,OAAO,IAAItC,IAAf,EAAqB;AACjB,aAAO,CAACuC,QAAD,EAAW,EAAX,CAAP;AACH;;AAED,QAAIE,OAAO,IAAIzC,IAAf,EAAqB;AACjB,aAAO,CAAC,CAAD,EAAI0C,QAAJ,CAAP;AACH;;AAED,WAAO,CAAC,CAAD,EAAI,EAAJ,CAAP;AACH,GAVsB,EAUpB,CAACH,QAAD,EAAWG,QAAX,EAAqB1C,IAArB,EAA2BsC,OAA3B,EAAoCG,OAApC,CAVoB,CAAvB;;AAYA,MAAMI,YAAY,GAAGZ,kBAAMC,OAAN,CAAc,YAAM;AACrC,QAAIlC,IAAI,IAAIyC,OAAR,IAAmBC,QAAQ,KAAK3C,KAApC,EAA2C;AACvC,aAAO,CAAC,CAAD,EAAI4C,MAAJ,CAAP;AACH;;AAED,QAAMG,aAAa,GAAGhD,gBAAgB,CAACC,KAAD,EAAQC,IAAR,CAAtC;;AAEA,QAAIA,IAAI,IAAIsC,OAAR,IAAmBC,QAAQ,KAAKxC,KAApC,EAA2C;AACvC,aAAO,CAACyC,MAAD,EAASM,aAAT,CAAP;AACH;;AAED,WAAO,CAAC,CAAD,EAAIA,aAAJ,CAAP;AACH,GAZoB,EAYlB,CAACP,QAAD,EAAWG,QAAX,EAAqBF,MAArB,EAA6BG,MAA7B,EAAqC3C,IAArC,EAA2CD,KAA3C,EAAkDuC,OAAlD,EAA2DG,OAA3D,CAZkB,CAArB;;AAcA,MAAMM,YAAY,GAAGd,kBAAMe,WAAN,CACjB,UAACC,YAAD,EAAuBC,WAAvB,EAAuD;AACnD,QAAIA,WAAW,IAAIT,OAAf,IAA0BQ,YAAY,IAAIP,QAA9C,EAAwD;AACpD,aAAOA,QAAP;AACH;;AAED,QAAIQ,WAAW,IAAIZ,OAAf,IAA0BW,YAAY,IAAIV,QAA9C,EAAwD;AACpD,aAAOA,QAAP;AACH;;AAED,WAAOU,YAAP;AACH,GAXgB,EAYjB,CAACV,QAAD,EAAWG,QAAX,EAAqBJ,OAArB,EAA8BG,OAA9B,CAZiB,CAArB;;AAeA,MAAMU,UAAU,GAAGlB,kBAAMe,WAAN,CACf,UAACI,OAAD,EAAkBC,SAAlB,EAAqCC,QAArC,EAAkE;AAC9D,QAAIA,QAAQ,IAAIb,OAAZ,IAAuBY,SAAS,IAAIX,QAApC,IAAgDU,OAAO,IAAIT,MAA/D,EAAuE;AACnE,aAAOA,MAAP;AACH;;AAED,QAAIW,QAAQ,IAAIhB,OAAZ,IAAuBe,SAAS,IAAIX,QAApC,IAAgDU,OAAO,IAAIZ,MAA/D,EAAuE;AACnE,aAAOA,MAAP;AACH;;AAED,QAAMe,qBAAqB,GAAGzD,gBAAgB,CAACuD,SAAD,EAAYC,QAAZ,CAA9C;;AAEA,QAAIC,qBAAqB,GAAGH,OAA5B,EAAqC;AACjC,aAAOG,qBAAP;AACH;;AAED,WAAOH,OAAP;AACH,GAjBc,EAkBf,CAACZ,MAAD,EAASG,MAAT,EAAiBD,QAAjB,EAA2BJ,OAA3B,EAAoCG,OAApC,CAlBe,CAAnB;;AAqBA,MAAMe,YAAY,GAAGvB,kBAAMe,WAAN,CACjB,iBAAkB;AAAA,QAARS,CAAQ,SAAf5C,KAAe;AACdwB,IAAAA,QAAQ,CAAC,iBAAc;AAAA;AAAA,UAAVqB,CAAU;AAAA,UAAPC,CAAO;;AACnB,UAAMN,SAAS,GAAGN,YAAY,CAACW,CAAD,EAAID,CAAJ,CAA9B;AACA,UAAML,OAAO,GAAGD,UAAU,CAACQ,CAAD,EAAIN,SAAJ,EAAeI,CAAf,CAA1B;AAEA,aAAO,CAACA,CAAD,EAAIJ,SAAJ,EAAeD,OAAf,CAAP;AACH,KALO,CAAR;AAMH,GARgB,EASjB,CAACD,UAAD,EAAaJ,YAAb,CATiB,CAArB;;AAWA,MAAMa,aAAa,GAAG3B,kBAAMe,WAAN,CAClB,iBAAkB;AAAA,QAARU,CAAQ,SAAf7C,KAAe;AACdwB,IAAAA,QAAQ,CAAC,iBAAc;AAAA;AAAA,UAAZoB,CAAY;AAAA,UAAPE,CAAO;;AACnB,UAAMP,OAAO,GAAGD,UAAU,CAACQ,CAAD,EAAID,CAAJ,EAAOD,CAAP,CAA1B;AAEA,aAAO,CAACA,CAAD,EAAIC,CAAJ,EAAON,OAAP,CAAP;AACH,KAJO,CAAR;AAKH,GAPiB,EAQlB,CAACD,UAAD,CARkB,CAAtB;;AAUA,MAAMU,WAAW,GAAG5B,kBAAMe,WAAN,CAAkB;AAAA,QAAUW,CAAV,UAAG9C,KAAH;AAAA,WAAkBwB,QAAQ,CAAC;AAAA;AAAA,UAAEoB,CAAF;AAAA,UAAKC,CAAL;;AAAA,aAAY,CAACD,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAZ;AAAA,KAAD,CAA1B;AAAA,GAAlB,EAAqE,EAArE,CAApB;AAEA;AACJ;AACA;AACA;;;AACI,6CAA0B,YAAM;AAC5B,QAAMG,OAAO,GAAG9B,eAAhB;;AAEA,QAAIX,QAAQ,IAAI,sBAAUyC,OAAV,EAAmB,CAAC9D,IAAD,EAAOD,KAAP,EAAcK,GAAd,CAAnB,CAAhB,EAAwD;AACpDiB,MAAAA,QAAQ,YAAKpB,IAAL,GAAUD,IAAV,EAAgBD,KAAhB,EAAuBK,GAAvB,4BAA+B,0BAAcS,KAAd,CAA/B,IAAR;AACH;AACJ,GAND,EAMG,CAACb,IAAD,EAAOD,KAAP,EAAcK,GAAd,CANH;AAQA;AACJ;AACA;AACA;;AACI,6CAA0B,YAAM;AAC5BiC,IAAAA,QAAQ,CAAC,UAAC0B,QAAD,EAAc;AACnB,UAAMC,OAAO,GAAGhC,eAAhB;;AAEA,UAAI,CAAC,sBAAU+B,QAAV,EAAoBC,OAApB,CAAL,EAAmC;AAC/B,eAAOD,QAAP;AACH;;AAED,UAAI1C,QAAJ,EAAc;AACV,sCAAoC2C,OAApC;AAAA,YAAOC,OAAP;AAAA,YAAgBC,QAAhB;AAAA,YAA0BC,MAA1B;;AACA9C,QAAAA,QAAQ,YAAKpB,IAAL,GAAUgE,OAAV,EAAmBC,QAAnB,EAA6BC,MAA7B,4BAAwC,0BAActD,KAAd,CAAxC,IAAR;AACH;;AAED,aAAOmD,OAAP;AACH,KAbO,CAAR;AAcH,GAfD,EAeG,CAACnD,KAAD,EAAQmB,eAAR,CAfH;;AAiBA,MAAMoC,SAAS,GAAG,SAAZA,SAAY,CAACC,GAAD;AAAA,WAAuCA,GAAG,IAAI1D,OAAP,GAAiBA,OAAO,CAAC0D,GAAD,CAAxB,GAAgC5E,cAAc,CAAC4E,GAAD,CAArF;AAAA,GAAlB;;AAEA,MAAMC,UAAU,GAAGF,SAAS,CAAC,MAAD,CAA5B;AACA,MAAMG,YAAY,GAAGH,SAAS,CAAC,QAAD,CAA9B;AACA,MAAMI,WAAW,GAAGJ,SAAS,CAAC,OAAD,CAA7B;AACA,MAAMK,oBAAoB,GAAGL,SAAS,CAAC,gBAAD,CAAtC;AACA,MAAMM,eAAe,GAAGD,oBAAoB,GAAG,OAAH,GAAa,MAAzD;AAEA,sBACI,gCAAC,aAAD;AAAe,IAAA,EAAE,EAAE/D;AAAnB,KAA2BqB,IAA3B,GACKuC,UAAU,iBACP,gCAAC,kCAAD;AACI,IAAA,EAAE,EAAE5D,EADR;AAEI,IAAA,SAAS,EAAEQ,SAFf;AAGI,IAAA,IAAI,EAAEN,IAHV;AAII,IAAA,IAAI,EAAC,KAJT;AAKI,IAAA,KAAK,EAAER,GALX;AAMI,IAAA,IAAI,EAAEyC,YAAY,CAAC,CAAD,CANtB;AAOI,IAAA,EAAE,EAAEA,YAAY,CAAC,CAAD,CAPpB;AAQI,IAAA,QAAQ,EAAE7B,QARd;AASI,IAAA,QAAQ,EAAEC,QATd;AAUI,IAAA,YAAY,EAAEE,YAVlB;AAWI,IAAA,cAAc,EAAEC,cAXpB;AAYI,IAAA,cAAc,EAAEU,cAZpB;AAaI,IAAA,QAAQ,EAAE+B,WAbd;AAcI,kBAAYrC;AAdhB,IAFR,EAmBK+C,YAAY,iBACT,gCAAC,kCAAD;AACI,IAAA,EAAE,EAAE7D,EADR;AAEI,IAAA,SAAS,EAAEQ,SAAS,IAAI,CAACP,OAAO,CAACf,IAFrC;AAGI,IAAA,IAAI,EAAEgB,IAHV;AAII,IAAA,IAAI,EAAC,OAJT;AAKI,IAAA,eAAe,EAAE8D,eALrB;AAMI,IAAA,KAAK,EAAE3E,KANX;AAOI,IAAA,IAAI,EAAE6C,cAAc,CAAC,CAAD,CAPxB;AAQI,IAAA,EAAE,EAAEA,cAAc,CAAC,CAAD,CARtB;AASI,IAAA,QAAQ,EAAE5B,QATd;AAUI,IAAA,QAAQ,EAAEC,QAVd;AAWI,IAAA,YAAY,EAAEE,YAXlB;AAYI,IAAA,cAAc,EAAEC,cAZpB;AAaI,IAAA,cAAc,EAAEU,cAbpB;AAcI,IAAA,QAAQ,EAAE8B,aAdd;AAeI,kBAAYlC;AAfhB,IApBR,EAsCK8C,WAAW,iBACR,gCAAC,kCAAD;AACI,IAAA,EAAE,EAAE9D,EADR;AAEI,IAAA,SAAS,EAAEQ,SAAS,IAAI,CAACP,OAAO,CAACf,IAAtB,IAA8B,CAACe,OAAO,CAAChB,MAFtD;AAGI,IAAA,IAAI,EAAEiB,IAHV;AAII,IAAA,IAAI,EAAC,MAJT;AAKI,IAAA,KAAK,EAAEZ,IALX;AAMI,IAAA,IAAI,EAAEsC,OANV;AAOI,IAAA,EAAE,EAAEG,OAPR;AAQI,IAAA,QAAQ,EAAEzB,QARd;AASI,IAAA,QAAQ,EAAEC,QATd;AAUI,IAAA,YAAY,EAAEE,YAVlB;AAWI,IAAA,cAAc,EAAEC,cAXpB;AAYI,IAAA,cAAc,EAAEU,cAZpB;AAaI,IAAA,QAAQ,EAAE0B,YAbd;AAcI,kBAAY5B;AAdhB,IAvCR,EAwDKL,mBAAmB,iBAAI;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,KAAK,EAAEV,KAAK,CAAC8D,WAAN,EAA5B;AAAiD,IAAA,IAAI,EAAErD;AAAvD,IAxD5B,CADJ;AA4DH,CAzNM","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { useIsomorphicLayoutEffect } from '@sberdevices/plasma-core';\n\nimport { SimpleDatePicker, SimpleDatePickerProps } from './SimpleDatePicker';\nimport { getDateValues, getNormalizeValues, getTimeValues, isChanged } from './utils';\nimport { DateType } from './types';\n\nconst defaultOptions = {\n    years: true,\n    months: true,\n    days: true,\n    shortMonthName: false,\n};\n\n/**\n * Вернёт максимальное количество дней в месяце\n */\nconst getMaxDayInMonth = (month: number, year: number): number => new Date(year, month + 1, 0).getDate();\n\n/**\n * Вернёт секунды\n */\nconst getSeconds = ([year, month, day]: DateType) => new Date(year, month, day, 0, 0, 0).getTime();\n\nconst StyledWrapper = styled.div`\n    display: flex;\n    width: max-content;\n`;\n\nexport interface DatePickerProps extends Omit<SimpleDatePickerProps, 'type' | 'from' | 'to' | 'onChange'> {\n    /**\n     * Обработчик изменения\n     */\n    onChange?: (value: Date) => void;\n    /**\n     * Значение контрола\n     */\n    value: Date;\n    /**\n     * Максимальное значение даты\n     */\n    max: Date;\n    /**\n     * Минимальное значение даты\n     */\n    min: Date;\n    /**\n     * Формат выводимого значения\n     */\n    options?: Partial<typeof defaultOptions>;\n    /**\n     * Сменить WAI-ARIA Label списка дней.\n     */\n    daysAriaLabel?: string;\n    /**\n     * Сменить WAI-ARIA Label списка месяцев.\n     */\n    monthsAriaLabel?: string;\n    /**\n     * Сменить WAI-ARIA Label списка годов.\n     */\n    yearsAriaLabel?: string;\n}\n\n/**\n * Компонент для выбора даты.\n */\nexport const DatePicker: React.FC<DatePickerProps> = ({\n    id,\n    options = defaultOptions,\n    size,\n    value,\n    max,\n    min,\n    disabled,\n    controls,\n    autofocus,\n    visibleItems,\n    scrollSnapType,\n    onChange,\n    name,\n    enableNativeControl,\n    daysAriaLabel: dayAriaLabel,\n    monthsAriaLabel: monthAriaLabel,\n    yearsAriaLabel: yearAriaLabel,\n    infiniteScroll,\n    ...rest\n}) => {\n    const normalizeValues = React.useMemo(() => getNormalizeValues(getDateValues, getSeconds)(value, min, max), [\n        value,\n        min,\n        max,\n    ]);\n\n    const [[year, month, day], setState] = React.useState(normalizeValues);\n    const [minYear, minMonth, minDay] = getDateValues(min);\n    const [maxYear, maxMonth, maxDay] = getDateValues(max);\n\n    const monthsInterval = React.useMemo(() => {\n        if (minYear >= year) {\n            return [minMonth, 11];\n        }\n\n        if (maxYear <= year) {\n            return [0, maxMonth];\n        }\n\n        return [0, 11];\n    }, [minMonth, maxMonth, year, minYear, maxYear]);\n\n    const daysInterval = React.useMemo(() => {\n        if (year >= maxYear && maxMonth === month) {\n            return [1, maxDay];\n        }\n\n        const maxDayInMonth = getMaxDayInMonth(month, year);\n\n        if (year <= minYear && minMonth === month) {\n            return [minDay, maxDayInMonth];\n        }\n\n        return [1, maxDayInMonth];\n    }, [minMonth, maxMonth, minDay, maxDay, year, month, minYear, maxYear]);\n\n    const getNextMonth = React.useCallback(\n        (currentMonth: number, currentYear: number): number => {\n            if (currentYear >= maxYear && currentMonth >= maxMonth) {\n                return maxMonth;\n            }\n\n            if (currentYear <= minYear && currentMonth <= minMonth) {\n                return minMonth;\n            }\n\n            return currentMonth;\n        },\n        [minMonth, maxMonth, minYear, maxYear],\n    );\n\n    const getNextDay = React.useCallback(\n        (nextDay: number, nextMonth: number, nextYear: number): number => {\n            if (nextYear >= maxYear && nextMonth >= maxMonth && nextDay >= maxDay) {\n                return maxDay;\n            }\n\n            if (nextYear <= minYear && nextMonth <= maxMonth && nextDay <= minDay) {\n                return minDay;\n            }\n\n            const possibleMaxDayInMonth = getMaxDayInMonth(nextMonth, nextYear);\n\n            if (possibleMaxDayInMonth < nextDay) {\n                return possibleMaxDayInMonth;\n            }\n\n            return nextDay;\n        },\n        [minDay, maxDay, maxMonth, minYear, maxYear],\n    );\n\n    const onYearChange = React.useCallback(\n        ({ value: y }) => {\n            setState(([, m, d]) => {\n                const nextMonth = getNextMonth(m, y);\n                const nextDay = getNextDay(d, nextMonth, y);\n\n                return [y, nextMonth, nextDay];\n            });\n        },\n        [getNextDay, getNextMonth],\n    );\n    const onMonthChange = React.useCallback(\n        ({ value: m }) => {\n            setState(([y, , d]) => {\n                const nextDay = getNextDay(d, m, y);\n\n                return [y, m, nextDay];\n            });\n        },\n        [getNextDay],\n    );\n    const onDayChange = React.useCallback(({ value: d }) => setState(([y, m]) => [y, m, d]), []);\n\n    /**\n     * При очередном прогоне, если значения year, month, day изменились,\n     * необходимо вызвать событие изменения, создав новый экземпляр Date\n     */\n    useIsomorphicLayoutEffect(() => {\n        const oldDate = normalizeValues;\n\n        if (onChange && isChanged(oldDate, [year, month, day])) {\n            onChange(new Date(year, month, day, ...getTimeValues(value)));\n        }\n    }, [year, month, day]);\n\n    /**\n     * Если значение value обновилось извне, необходимо изменить стейт\n     * и вызвать событие изменения, создав новый экземпляр Date\n     */\n    useIsomorphicLayoutEffect(() => {\n        setState((prevDate) => {\n            const newDate = normalizeValues;\n\n            if (!isChanged(prevDate, newDate)) {\n                return prevDate;\n            }\n\n            if (onChange) {\n                const [newYear, newMonth, newDay] = newDate;\n                onChange(new Date(newYear, newMonth, newDay, ...getTimeValues(value)));\n            }\n\n            return newDate;\n        });\n    }, [value, normalizeValues]);\n\n    const getOption = (key: keyof typeof defaultOptions) => (key in options ? options[key] : defaultOptions[key]);\n\n    const daysOption = getOption('days');\n    const monthsOption = getOption('months');\n    const yearsOption = getOption('years');\n    const shortMonthNameOption = getOption('shortMonthName');\n    const monthNameFormat = shortMonthNameOption ? 'short' : 'long';\n\n    return (\n        <StyledWrapper id={id} {...rest}>\n            {daysOption && (\n                <SimpleDatePicker\n                    id={id}\n                    autofocus={autofocus}\n                    size={size}\n                    type=\"day\"\n                    value={day}\n                    from={daysInterval[0]}\n                    to={daysInterval[1]}\n                    disabled={disabled}\n                    controls={controls}\n                    visibleItems={visibleItems}\n                    scrollSnapType={scrollSnapType}\n                    infiniteScroll={infiniteScroll}\n                    onChange={onDayChange}\n                    aria-label={dayAriaLabel}\n                />\n            )}\n            {monthsOption && (\n                <SimpleDatePicker\n                    id={id}\n                    autofocus={autofocus && !options.days}\n                    size={size}\n                    type=\"month\"\n                    monthNameFormat={monthNameFormat}\n                    value={month}\n                    from={monthsInterval[0]}\n                    to={monthsInterval[1]}\n                    disabled={disabled}\n                    controls={controls}\n                    visibleItems={visibleItems}\n                    scrollSnapType={scrollSnapType}\n                    infiniteScroll={infiniteScroll}\n                    onChange={onMonthChange}\n                    aria-label={monthAriaLabel}\n                />\n            )}\n            {yearsOption && (\n                <SimpleDatePicker\n                    id={id}\n                    autofocus={autofocus && !options.days && !options.months}\n                    size={size}\n                    type=\"year\"\n                    value={year}\n                    from={minYear}\n                    to={maxYear}\n                    disabled={disabled}\n                    controls={controls}\n                    visibleItems={visibleItems}\n                    scrollSnapType={scrollSnapType}\n                    infiniteScroll={infiniteScroll}\n                    onChange={onYearChange}\n                    aria-label={yearAriaLabel}\n                />\n            )}\n            {enableNativeControl && <input type=\"hidden\" value={value.toISOString()} name={name} />}\n        </StyledWrapper>\n    );\n};\n"],"file":"DatePicker.js"}