{"version":3,"sources":["../../src/components/Device/DeviceDetection.tsx"],"names":["transformWithRoot","typo","typoSizes","sberBox","createGlobalStyle","sberPortal","mobile","StandardTypo","standard","CompatibleTypo","compatible","DeviceThemeProvider","theme","children","detectDeviceCallback","detectDevice","responsiveTypo","lowPerformance","deviceKind","deviceScale","deviceScales","sberPortalScale","Typo","React","useMemo"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;AAEA;AACA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,IAAD;AAAA,kCAEpB,iCAAgBA,IAAI,CAAC,OAAD,CAApB,CAFoB;AAAA,CAA1B;;AAIA,IAAMC,SAAS,GAAG;AACdC,EAAAA,OAAO,mBAAEC,mCAAF,yBAAsBJ,iBAAiB,CAACG,qBAAD,CAAvC,CADO;AAEdE,EAAAA,UAAU,mBAAED,mCAAF,yBAAsBJ,iBAAiB,CAACK,wBAAD,CAAvC,CAFI;AAGdC,EAAAA,MAAM,mBAAEF,mCAAF,yBAAsBJ,iBAAiB,CAACM,oBAAD,CAAvC;AAHQ,CAAlB;AAKA;;AAEA,IAAMC,YAAY,gBAAG,yCAAkBC,oBAAlB,CAArB;AACA,IAAMC,cAAc,gBAAG,yCAAkBC,sBAAlB,CAAvB;;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMC,mBAA+C,GAAG,SAAlDA,mBAAkD,OAMzD;AAAA,MALFC,KAKE,QALFA,KAKE;AAAA,MAJFC,QAIE,QAJFA,QAIE;AAAA,mCAHFC,oBAGE;AAAA,MAHFA,oBAGE,sCAHqBC,mBAGrB;AAAA,iCAFFC,cAEE;AAAA,MAFFA,cAEE,oCAFe,KAEf;AAAA,iCADFC,cACE;AAAA,MADFA,cACE,oCADe,KACf;AACF,MAAMC,UAAU,GAAGJ,oBAAoB,EAAvC;AACA,MAAMK,WAAW,GAAGC,oBAAaF,UAAb,KAA4BG,6BAAhD;;AACA,MAAMC,IAAI,GAAGC,kBAAMC,OAAN,CAAc;AAAA,WAAMtB,SAAS,CAACgB,UAAD,CAAf;AAAA,GAAd,EAA2C,CAACA,UAAD,CAA3C,CAAb;;AAEA,sBACI,gCAAC,+BAAD;AAAe,IAAA,KAAK,kCAAON,KAAP;AAAcO,MAAAA,WAAW,EAAXA,WAAd;AAA2BF,MAAAA,cAAc,EAAdA;AAA3B;AAApB,KACKD,cAAc,gBACX,+EACI,gCAAC,YAAD;AAAc,IAAA,WAAW,EAAEG;AAA3B,IADJ,eAEI,gCAAC,cAAD,OAFJ,CADW,gBAMX,gCAAC,IAAD,OAPR,EASKN,QATL,CADJ;AAaH,CAxBM","sourcesContent":["import React from 'react';\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\nimport { sberPortal, sberBox, mobile, sberPortalScale } from '@sberdevices/plasma-tokens';\nimport { transformStyles } from '@sberdevices/plasma-core';\nimport { standard, compatible } from '@sberdevices/plasma-typo';\n\nimport { detectDevice, deviceScales, DeviceKind } from '../../utils';\n\n/* stylelint-disable */\nconst transformWithRoot = (typo: typeof sberBox) => `\n:root {\n    ${transformStyles(typo[':root'])}\n}`;\nconst typoSizes = {\n    sberBox: createGlobalStyle`${transformWithRoot(sberBox)}`,\n    sberPortal: createGlobalStyle`${transformWithRoot(sberPortal)}`,\n    mobile: createGlobalStyle`${transformWithRoot(mobile)}`,\n};\n/* stylelint-enable */\n\nconst StandardTypo = createGlobalStyle(standard);\nconst CompatibleTypo = createGlobalStyle(compatible);\n\nexport interface DeviceThemeProps {\n    /**\n     * Объект темы для стилизованных компонентов.\n     *\n     * Внутри `DeviceThemeProvider` использует `styled-components/ThemeProvider`\n     * и расширяет объект темы полем `deviceScale`.\n     */\n    theme?: object;\n    /**\n     * Пользовательская функция определения устройства.\n     *\n     * Должна возвращать 3 возможных значения - `sberBox` или `sberPortal` или `mobile`.\n     *\n     * Возвращаемое значение  по умолчанию - `sberBox`.\n     *\n     * При значениях `sberBox` и `sberPortal` типографика примет размер **x2**, а при `mobile` - **x1**.\n     */\n    detectDeviceCallback?: () => DeviceKind;\n    responsiveTypo?: boolean;\n    /**\n     * Флаг для отключения анимаций и прочих твиков над UI, снижающих производительность.\n     */\n    lowPerformance?: boolean;\n}\n\n/**\n * Провайдер обязателен для использования, необходимо обернуть в него все приложение.\n *\n * Назначение - определяет, на какой *поверхности* (**устройстве**) запущено приложение.\n *\n * В зависимости от поверхности, применяет глобальные стили типографики,\n * подходящие данной платформе, ко всему приложению.\n *\n * Функцией определения по умолчанию тип поверхности определяется на основании `userAgent`,\n * при отсутствии `navigator` или `userAgent`, поверхность будет определен как `sberBox`.\n *\n * Имеется возможность передать провайдеру собственную логику определения девайса\n * с помощью пропса `detectDeviceCallback`.\n * При этом стоит помнить, что разрешены только 3 стандартных значения.\n */\nexport const DeviceThemeProvider: React.FC<DeviceThemeProps> = ({\n    theme,\n    children,\n    detectDeviceCallback = detectDevice,\n    responsiveTypo = false,\n    lowPerformance = false,\n}) => {\n    const deviceKind = detectDeviceCallback();\n    const deviceScale = deviceScales[deviceKind] || sberPortalScale;\n    const Typo = React.useMemo(() => typoSizes[deviceKind], [deviceKind]);\n\n    return (\n        <ThemeProvider theme={{ ...theme, deviceScale, lowPerformance }}>\n            {responsiveTypo ? (\n                <>\n                    <StandardTypo deviceScale={deviceScale} />\n                    <CompatibleTypo />\n                </>\n            ) : (\n                <Typo />\n            )}\n            {children}\n        </ThemeProvider>\n    );\n};\n"],"file":"DeviceDetection.js"}