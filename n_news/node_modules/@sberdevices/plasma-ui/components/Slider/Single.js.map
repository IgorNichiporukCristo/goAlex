{"version":3,"sources":["../../src/components/Slider/Single.tsx"],"names":["Slider","min","max","value","disabled","onChangeCommitted","onChange","React","useState","xHandle","stepSize","railFillWidth","state","setState","useEffect","localValue","Math","prevState","setStepSize","useCallback","newStepSize","onHandleChange","handleValue","data","newHandleXPosition","x","onHandleChangeCommited","lastX"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;AA6BO,IAAMA,MAA6B,GAAG,SAAhCA,MAAgC,OAAgE;AAAA,MAA7DC,GAA6D,QAA7DA,GAA6D;AAAA,MAAxDC,GAAwD,QAAxDA,GAAwD;AAAA,MAAnDC,KAAmD,QAAnDA,KAAmD;AAAA,MAA5CC,QAA4C,QAA5CA,QAA4C;AAAA,MAAlCC,iBAAkC,QAAlCA,iBAAkC;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AACzG,wBAA0BC,kBAAMC,QAAN,CAAe;AACrCC,IAAAA,OAAO,EAAE,CAD4B;AAErCC,IAAAA,QAAQ,EAAE,CAF2B;AAGrCC,IAAAA,aAAa,EAAE;AAHsB,GAAf,CAA1B;AAAA;AAAA,MAAOC,KAAP;AAAA,MAAcC,QAAd;;AAMAN,oBAAMO,SAAN,CAAgB,YAAM;AAClB,QAAMC,UAAU,GAAGC,IAAI,CAACf,GAAL,CAASe,IAAI,CAACd,GAAL,CAASC,KAAT,EAAgBF,GAAhB,CAAT,EAA+BC,GAA/B,IAAsCD,GAAzD;AACA,QAAQS,QAAR,GAAqBE,KAArB,CAAQF,QAAR;AAEAG,IAAAA,QAAQ,CAAC,UAACI,SAAD;AAAA,6CACFA,SADE;AAELR,QAAAA,OAAO,EAAEC,QAAQ,GAAGK,UAFf;AAGLJ,QAAAA,aAAa,EAAED,QAAQ,GAAGK;AAHrB;AAAA,KAAD,CAAR;AAKH,GATD,EASG,CAACZ,KAAD,EAAQS,KAAK,CAACF,QAAd,EAAwBT,GAAxB,CATH;;AAWA,MAAMiB,WAAW,GAAGX,kBAAMY,WAAN,CAAkB,UAACC,WAAD,EAAiB;AACnDP,IAAAA,QAAQ,CAAC,UAACI,SAAD;AAAA,6CACFA,SADE;AAELP,QAAAA,QAAQ,EAAEU;AAFL;AAAA,KAAD,CAAR;AAIH,GALmB,EAKjB,EALiB,CAApB;;AAOA,MAAMC,cAAc,GAAGd,kBAAMY,WAAN,CACnB,UAACG,WAAD,EAAcC,IAAd,EAAuB;AACnB,QAAMC,kBAAkB,GAAGD,IAAI,CAACE,CAAhC;AAEAZ,IAAAA,QAAQ,CAAC,UAACI,SAAD;AAAA,6CACFA,SADE;AAELN,QAAAA,aAAa,EAAEa;AAFV;AAAA,KAAD,CAAR;;AAKA,QAAIlB,QAAJ,EAAc;AACVA,MAAAA,QAAQ,CAACgB,WAAD,CAAR;AACH;AACJ,GAZkB,EAanB,CAAChB,QAAD,CAbmB,CAAvB;;AAgBA,MAAMoB,sBAAsB,GAAGnB,kBAAMY,WAAN,CAC3B,UAACG,WAAD,EAAcC,IAAd,EAAuB;AACnBlB,IAAAA,iBAAiB,CAACiB,WAAD,CAAjB;AACAT,IAAAA,QAAQ,CAAC,UAACI,SAAD;AAAA,6CACFA,SADE;AAELR,QAAAA,OAAO,EAAEc,IAAI,CAACI;AAFT;AAAA,KAAD,CAAR;AAIH,GAP0B,EAQ3B,CAACtB,iBAAD,CAR2B,CAA/B;;AAWA,sBACI,gCAAC,sBAAD;AACI,IAAA,GAAG,EAAEJ,GADT;AAEI,IAAA,GAAG,EAAEC,GAFT;AAGI,IAAA,QAAQ,EAAEE,QAHd;AAII,IAAA,WAAW,EAAEc,WAJjB;AAKI,IAAA,aAAa,EAAEN,KAAK,CAACD;AALzB,kBAOI,gCAAC,cAAD;AACI,IAAA,QAAQ,EAAEC,KAAK,CAACF,QADpB;AAEI,IAAA,iBAAiB,EAAEgB,sBAFvB;AAGI,IAAA,QAAQ,EAAEL,cAHd;AAII,IAAA,SAAS,EAAET,KAAK,CAACH,OAJrB;AAKI,IAAA,GAAG,EAAER,GALT;AAMI,IAAA,GAAG,EAAEC,GANT;AAOI,IAAA,QAAQ,EAAEE;AAPd,IAPJ,CADJ;AAmBH,CAvEM","sourcesContent":["import React from 'react';\n\nimport { SliderBase } from './SliderBase';\nimport { Handle } from './Handle';\n\nexport interface SliderProps {\n    /**\n     * Минимальное значение\n     */\n    min: number;\n    /**\n     * Максимальное значение\n     */\n    max: number;\n    /**\n     * Текущее значение\n     */\n    value: number;\n    /**\n     * Компонент неактивен\n     */\n    disabled?: boolean;\n    /**\n     * Вызывается при перемещении ползунка\n     */\n    onChangeCommitted(value: number): void;\n    /**\n     * Вызывается при отпускании ползунка\n     */\n    onChange?(value: number): void;\n}\n\nexport const Slider: React.FC<SliderProps> = ({ min, max, value, disabled, onChangeCommitted, onChange }) => {\n    const [state, setState] = React.useState({\n        xHandle: 0,\n        stepSize: 0,\n        railFillWidth: 0,\n    });\n\n    React.useEffect(() => {\n        const localValue = Math.min(Math.max(value, min), max) - min;\n        const { stepSize } = state;\n\n        setState((prevState) => ({\n            ...prevState,\n            xHandle: stepSize * localValue,\n            railFillWidth: stepSize * localValue,\n        }));\n    }, [value, state.stepSize, min]);\n\n    const setStepSize = React.useCallback((newStepSize) => {\n        setState((prevState) => ({\n            ...prevState,\n            stepSize: newStepSize,\n        }));\n    }, []);\n\n    const onHandleChange = React.useCallback(\n        (handleValue, data) => {\n            const newHandleXPosition = data.x;\n\n            setState((prevState) => ({\n                ...prevState,\n                railFillWidth: newHandleXPosition,\n            }));\n\n            if (onChange) {\n                onChange(handleValue);\n            }\n        },\n        [onChange],\n    );\n\n    const onHandleChangeCommited = React.useCallback(\n        (handleValue, data) => {\n            onChangeCommitted(handleValue);\n            setState((prevState) => ({\n                ...prevState,\n                xHandle: data.lastX,\n            }));\n        },\n        [onChangeCommitted],\n    );\n\n    return (\n        <SliderBase\n            min={min}\n            max={max}\n            disabled={disabled}\n            setStepSize={setStepSize}\n            railFillWidth={state.railFillWidth}\n        >\n            <Handle\n                stepSize={state.stepSize}\n                onChangeCommitted={onHandleChangeCommited}\n                onChange={onHandleChange}\n                xPosition={state.xHandle}\n                min={min}\n                max={max}\n                disabled={disabled}\n            />\n        </SliderBase>\n    );\n};\n"],"file":"Single.js"}