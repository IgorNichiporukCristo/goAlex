{"version":3,"sources":["../../src/components/Slider/Handle.tsx"],"names":["HandleStyled","styled","div","white","handleDiameter","handleBorderWidth","surfaceLiquid03","getValue","handleCenterXRelative","stepSize","min","max","newValue","Math","round","getOffsets","ref","side","current","size","clientWidth","clientLeft","Handle","React","forwardRef","onChangeCommitted","onChange","xPosition","bounds","zIndex","disabled","lastOnChangeValue","useRef","onDrag","useCallback","_","data","newHandleXPosition","lastX","onStop","offsetLeft","offsetRight","leftValueBound","rightValueBound","leftPositionBound","rightPositionBound","left","right","x","y","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport Draggable, { DraggableData } from 'react-draggable';\nimport { surfaceLiquid03, white } from '@sberdevices/plasma-tokens';\n\nimport { handleDiameter, handleBorderWidth } from './SliderBase';\n\ninterface HandleProps {\n    stepSize: number;\n    min: number;\n    max: number;\n    side?: 'left' | 'right';\n    bounds?: number[];\n    xPosition?: number;\n    zIndex?: number;\n    disabled?: boolean;\n    onChangeCommitted(value: number, data: DraggableData): void;\n    onChange?(value: number, data: DraggableData): void;\n}\n\nconst HandleStyled = styled.div`\n    cursor: pointer;\n    position: absolute;\n    z-index: 100;\n    top: 0;\n    left: 0;\n    border-radius: 50%;\n    background-color: ${white};\n    width: ${handleDiameter}rem;\n    height: ${handleDiameter}rem;\n    border: ${handleBorderWidth}rem solid ${surfaceLiquid03};\n    background-clip: content-box;\n`;\n\nfunction getValue(handleCenterXRelative: number, stepSize: number, min: number, max: number) {\n    const newValue = Math.round(handleCenterXRelative / stepSize) + min;\n\n    return Math.min(Math.max(newValue, min), max);\n}\n\nfunction getOffsets(\n    ref: ((instance: HTMLDivElement | null) => void) | React.MutableRefObject<HTMLDivElement | null> | null,\n    side?: 'left' | 'right',\n) {\n    if (!ref || !('current' in ref) || !ref.current || !side) {\n        return [0, 0];\n    }\n\n    const size = ref.current.clientWidth - ref.current.clientLeft;\n\n    if (side === 'left') {\n        return [0, size];\n    }\n\n    if (side === 'right') {\n        return [size, 0];\n    }\n\n    return [0, 0];\n}\n\nexport const Handle = React.forwardRef<HTMLDivElement, HandleProps>(\n    ({ stepSize, onChangeCommitted, onChange, xPosition, min, max, bounds = [], zIndex, disabled, side }, ref) => {\n        const lastOnChangeValue = React.useRef<number | null>(null);\n\n        const onDrag = React.useCallback(\n            (_, data) => {\n                const newHandleXPosition = data.lastX;\n\n                if (onChange) {\n                    const newValue = getValue(newHandleXPosition, stepSize, min, max);\n                    if (lastOnChangeValue.current !== newValue) {\n                        onChange(newValue, data);\n                        lastOnChangeValue.current = newValue;\n                    }\n                }\n            },\n            [onChange, stepSize, min, max],\n        );\n\n        const onStop = React.useCallback(\n            (_, data) => {\n                const newHandleXPosition = data.lastX;\n                const newValue = getValue(newHandleXPosition, stepSize, min, max);\n                onChangeCommitted(newValue, data);\n            },\n            [onChangeCommitted, stepSize, min, max],\n        );\n\n        const [offsetLeft, offsetRight] = getOffsets(ref, side);\n\n        const [leftValueBound, rightValueBound] = bounds;\n        const leftPositionBound = leftValueBound ? (leftValueBound - min) * stepSize : null;\n        const rightPositionBound = rightValueBound ? (rightValueBound - min) * stepSize : null;\n\n        return (\n            <Draggable\n                axis=\"x\"\n                bounds={{\n                    left: (leftPositionBound ?? 0) + offsetLeft,\n                    right: (rightPositionBound ?? stepSize * (max - min)) - offsetRight,\n                }}\n                grid={[stepSize, 1]}\n                onStop={onStop}\n                onDrag={onDrag}\n                position={typeof xPosition === 'number' ? { x: xPosition, y: 0 } : undefined}\n                disabled={disabled}\n            >\n                <HandleStyled ref={ref} style={{ zIndex }} />\n            </Draggable>\n        );\n    },\n);\n"],"file":"Handle.js"}