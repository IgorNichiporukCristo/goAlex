{"version":3,"sources":["../src/utils/mediaQuery.ts"],"names":["breakpoints","XXL","gridBreakpoints","columns","gridColumns","margins","gridMargins","XL","gutters","gridGutters","sizes","Object","keys","mediaQuery","breakpoint","deviceScale","index","indexOf","nextBreakpoint","min","max","content","css"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAEO,IAAMA,WAAW;AACpBC,EAAAA,GAAG,EAAE;AADe,GAEjBC,2BAFiB,CAAjB;;;;AAIA,IAAMC,OAAO;AAChBF,EAAAA,GAAG,EAAE;AADW,GAEbG,uBAFa,CAAb;;;;AAIA,IAAMC,OAAO;AAChBJ,EAAAA,GAAG,EAAE;AADW,GAEbK,uBAFa;AAGhBC,EAAAA,EAAE,EAAE;AAHY,EAAb;;;;AAKA,IAAMC,OAAO;AAChBP,EAAAA,GAAG,EAAE;AADW,GAEbQ,uBAFa,CAAb;;;AAOA,IAAMC,KAAK,gBAAGC,MAAM,CAACC,IAAP,CAAYZ,WAAZ,CAAd;AAEP;AACA;AACA;;;;AACO,IAAMa,UAAU,GAAG,SAAbA,UAAa,CAACC,UAAD,EAAiE;AAAA,MAAxCC,WAAwC,uEAA1B,CAA0B;AACvF,MAAMC,KAAK,GAAGN,KAAK,CAACO,OAAN,CAAcH,UAAd,CAAd;AACA,MAAMI,cAAc,GAAGR,KAAK,CAACM,KAAK,GAAG,CAAT,CAA5B;AACA,MAAMG,GAAG,GAAGnB,WAAW,CAACc,UAAD,CAAX,GAA0B,CAA1B,GAA8Bd,WAAW,CAACc,UAAD,CAAX,GAA0BC,WAAxD,GAAsE,IAAlF;AACA,MAAMK,GAAG,GAAGpB,WAAW,CAACkB,cAAD,CAAX,GAA8B,CAAClB,WAAW,CAACkB,cAAD,CAAX,GAA8B,CAA/B,IAAoCH,WAAlE,GAAgF,IAA5F;;AAEA,MAAII,GAAG,KAAK,IAAR,IAAgBC,GAAG,KAAK,IAA5B,EAAkC;AAC9B,WAAO,UAACC,OAAD;AAAA,iBACHC,qBADG,uCAEsBF,GAFtB,EAGOC,OAHP;AAAA,KAAP;AAMH;;AAED,MAAIF,GAAG,KAAK,IAAR,IAAgBC,GAAG,KAAK,IAA5B,EAAkC;AAC9B,WAAO,UAACC,OAAD;AAAA,iBACHC,qBADG,yEAEiCH,GAFjC,EAE2DC,GAF3D,EAGOC,OAHP;AAAA,KAAP;AAMH;;AAED,SAAO,UAACA,OAAD;AAAA,eACHC,qBADG,uCAEsBH,GAFtB,EAGOE,OAHP;AAAA,GAAP;AAMH,CA9BM","sourcesContent":["import { css } from 'styled-components';\nimport { gridBreakpoints, gridColumns, gridGutters, gridMargins, MediaQueryFunction } from '@sberdevices/plasma-core';\n\nexport const breakpoints = {\n    XXL: 1200, // Desktop large\n    ...gridBreakpoints,\n};\nexport const columns = {\n    XXL: 16,\n    ...gridColumns,\n};\nexport const margins = {\n    XXL: 4,\n    ...gridMargins,\n    XL: 4,\n};\nexport const gutters = {\n    XXL: 1,\n    ...gridGutters,\n};\n\nexport type Breakpoint = keyof typeof breakpoints;\n\nexport const sizes = Object.keys(breakpoints) as Breakpoint[];\n\n/**\n * Обертка над css-медиазапросами с заранее определенными брейкпоинтами.\n */\nexport const mediaQuery = (breakpoint: Breakpoint, deviceScale = 1): MediaQueryFunction => {\n    const index = sizes.indexOf(breakpoint);\n    const nextBreakpoint = sizes[index - 1] as Breakpoint;\n    const min = breakpoints[breakpoint] > 0 ? breakpoints[breakpoint] * deviceScale : null;\n    const max = breakpoints[nextBreakpoint] ? (breakpoints[nextBreakpoint] - 1) * deviceScale : null;\n\n    if (min === null && max !== null) {\n        return (content) =>\n            css`\n                @media (max-width: ${max}px) {\n                    ${content}\n                }\n            `;\n    }\n\n    if (min !== null && max !== null) {\n        return (content) =>\n            css`\n                @media screen and (min-width: ${min}px) and (max-width: ${max}px) {\n                    ${content}\n                }\n            `;\n    }\n\n    return (content) =>\n        css`\n            @media (min-width: ${min}px) {\n                ${content}\n            }\n        `;\n};\n"],"file":"mediaQuery.js"}