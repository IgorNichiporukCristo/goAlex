"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withMultiSelect = void 0;

var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));

var _Select = /*#__PURE__*/require("./Select.utils");

var _excluded = ["value", "items", "separator", "onChange"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * Выпадающий список с возможностью выбора нескольких значений.
 */
var withMultiSelect = function withMultiSelect(View) {
  return /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
    var value = _ref.value,
        _ref$items = _ref.items,
        items = _ref$items === void 0 ? [] : _ref$items,
        _ref$separator = _ref.separator,
        separator = _ref$separator === void 0 ? ', ' : _ref$separator,
        onChange = _ref.onChange,
        rest = _objectWithoutProperties(_ref, _excluded);

    var isActive = (0, _react.useCallback)(function (item) {
      return Boolean(value && value.includes(item.value));
    }, [value]);
    var viewValue = (0, _react.useMemo)(function () {
      return (0, _Select.flattenItemsRecursive)(items).filter(isActive).map(function (item) {
        return item.label;
      }).join(separator);
    }, [value, items, isActive]);
    var viewItems = (0, _react.useMemo)(function () {
      return (0, _Select.setActiveRecursive)(items, isActive);
    }, [value, items, isActive]);
    var onItemSelect = (0, _react.useCallback)(function (item) {
      var set = new Set(value);

      if (set.has(item.value)) {
        set["delete"](item.value);
      } else {
        set.add(item.value);
      }

      onChange === null || onChange === void 0 ? void 0 : onChange(Array.from(set));
    }, [onChange]);
    return /*#__PURE__*/_react["default"].createElement(View, _extends({}, rest, {
      ref: ref,
      value: viewValue,
      items: viewItems,
      onItemSelect: onItemSelect
    }));
  });
};

exports.withMultiSelect = withMultiSelect;
//# sourceMappingURL=withMultiSelect.js.map