{"version":3,"sources":["../../src/components/Select/withSingleSelect.tsx"],"names":["withSingleSelect","View","ref","value","items","onChange","rest","isActive","item","viewValue","find","label","viewItems","onItemSelect"],"mappings":";;;;;;;;;AAAA;;AAGA;;;;;;;;;;;;;;AAeA;AACA;AACA;AACO,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,IAAD;AAAA,sBAC5B,uBAAgD,gBAA2CC,GAA3C,EAAmD;AAAA,QAAhDC,KAAgD,QAAhDA,KAAgD;AAAA,0BAAzCC,KAAyC;AAAA,QAAzCA,KAAyC,2BAAjC,EAAiC;AAAA,QAA7BC,QAA6B,QAA7BA,QAA6B;AAAA,QAAhBC,IAAgB;;AAC/F,QAAMC,QAAQ,GAAG,wBAAY,UAACC,IAAD;AAAA,aAAUA,IAAI,CAACL,KAAL,KAAeA,KAAzB;AAAA,KAAZ,EAA4C,CAACA,KAAD,CAA5C,CAAjB;AAEA,QAAMM,SAAS,GAAG,oBAAQ;AAAA;;AAAA,gEAAM,mCAAsBL,KAAtB,EAA6BM,IAA7B,CAAkCH,QAAlC,CAAN,2DAAM,uBAA6CI,KAAnD,yEAA4D,EAA5D;AAAA,KAAR,EAAwE,CACtFR,KADsF,EAEtFC,KAFsF,EAGtFG,QAHsF,CAAxE,CAAlB;AAMA,QAAMK,SAAS,GAAG,oBAAQ;AAAA,aAAM,gCAAmBR,KAAnB,EAA0BG,QAA1B,CAAN;AAAA,KAAR,EAAmD,CAACJ,KAAD,EAAQC,KAAR,EAAeG,QAAf,CAAnD,CAAlB;AAEA,QAAMM,YAAY,GAAG,wBAAY,UAACL,IAAD;AAAA,aAAUH,QAAV,aAAUA,QAAV,uBAAUA,QAAQ,CAAGG,IAAI,CAACL,KAAR,CAAlB;AAAA,KAAZ,EAA8C,CAACE,QAAD,CAA9C,CAArB;AAEA,wBAAO,gCAAC,IAAD,eAAUC,IAAV;AAAgB,MAAA,GAAG,EAAEJ,GAArB;AAA0B,MAAA,KAAK,EAAEO,SAAjC;AAA4C,MAAA,KAAK,EAAEG,SAAnD;AAA8D,MAAA,YAAY,EAAEC;AAA5E,OAAP;AACH,GAdD,CAD4B;AAAA,CAAzB","sourcesContent":["import React, { forwardRef, useCallback, useMemo } from 'react';\nimport type { ComponentType, RefAttributes } from 'react';\n\nimport { flattenItemsRecursive, setActiveRecursive } from './Select.utils';\nimport type { SelectRefElement } from './SelectButton';\nimport type { SelectViewProps } from './SelectView';\n\nexport interface SingleSelectProps extends Omit<SelectViewProps, 'onItemClick' | 'value' | 'label' | 'multiselect'> {\n    /**\n     * Значение контрола.\n     */\n    value: string | number | null;\n    /**\n     * Обработчик изменения значения.\n     */\n    onChange?: (value: string | number | null) => void;\n}\n\n/**\n * Выпадающий список с возможностью выбора одного значения.\n */\nexport const withSingleSelect = (View: ComponentType<SelectViewProps & RefAttributes<SelectRefElement>>) =>\n    forwardRef<SelectRefElement, SingleSelectProps>(({ value, items = [], onChange, ...rest }, ref) => {\n        const isActive = useCallback((item) => item.value === value, [value]);\n\n        const viewValue = useMemo(() => flattenItemsRecursive(items).find(isActive)?.label ?? '', [\n            value,\n            items,\n            isActive,\n        ]);\n\n        const viewItems = useMemo(() => setActiveRecursive(items, isActive), [value, items, isActive]);\n\n        const onItemSelect = useCallback((item) => onChange?.(item.value), [onChange]);\n\n        return <View {...rest} ref={ref} value={viewValue} items={viewItems} onItemSelect={onItemSelect} />;\n    });\n"],"file":"withSingleSelect.js"}