{"version":3,"sources":["../../../src/components/Dropdown/keyboardNavigation/utils.ts"],"names":["Actions","Keys","getActionFromKey","event","isOpen","altKey","ctrlKey","metaKey","key","openKeys","ArrowUp","ArrowDown","Enter","Space","includes","Open","Home","First","End","Last","Backspace","Clear","length","Type","CloseSelect","Next","Previous","ArrowRight","OpenSub","ArrowLeft","CloseSub","PageUp","PageDown","Escape","Close","Select","getUpdatedIndex","action","index","items","pageSize","maxIndex","newIndex","Math","max","min","item","isDisabled","filterOptions","options","filter","exclude","lowerCaseFilter","toLowerCase","option","matches","indexOf","getIndexByLetter","startIndex","orderedOptions","slice","firstMatch","allSameLetter","array","every","letter","split"],"mappings":"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","sourcesContent":["import type { DropdownNode } from '../Dropdown.types';\n\nexport enum Actions {\n    Close,\n    CloseSelect,\n    First,\n    Last,\n    Next,\n    Open,\n    PageDown,\n    PageUp,\n    Previous,\n    Select,\n    Type,\n    OpenSub,\n    CloseSub,\n}\n\nexport enum Keys {\n    Home = 'Home',\n    ArrowUp = 'ArrowUp',\n    ArrowDown = 'ArrowDown',\n    ArrowLeft = 'ArrowLeft',\n    ArrowRight = 'ArrowRight',\n    Enter = 'Enter',\n    Space = ' ',\n    End = 'End',\n    Backspace = 'Backspace',\n    Clear = 'Clear',\n    PageUp = 'PageUp',\n    PageDown = 'PageDown',\n    Escape = 'Escape',\n}\n\n/**\n * Возвращает экшн в соответствии с нажатой клавишей.\n */\nexport const getActionFromKey = (event: KeyboardEvent, isOpen?: boolean) => {\n    const { altKey, ctrlKey, metaKey } = event;\n\n    // Все кнопки, которые открывают селект\n    const key = event.key as Keys;\n    const openKeys = [Keys.ArrowUp, Keys.ArrowDown, Keys.Enter, Keys.Space];\n\n    // Обработка открытия когда селект закрыт\n    if (!isOpen && openKeys.includes(key)) {\n        return Actions.Open;\n    }\n\n    // Кнопки Home и End должны перемещать всегда(открыт или закрыт)\n    if (key === Keys.Home) {\n        return Actions.First;\n    }\n    if (key === Keys.End) {\n        return Actions.Last;\n    }\n\n    // Обработка ввода на клавиатуре при открытом и закрытом селекте\n    if (\n        key === Keys.Backspace ||\n        key === Keys.Clear ||\n        (key.length === 1 && key !== Keys.Space && !altKey && !ctrlKey && !metaKey)\n    ) {\n        return Actions.Type;\n    }\n\n    // Обработка когда селект открыт\n    if (isOpen) {\n        if (key === Keys.ArrowUp && altKey) {\n            return Actions.CloseSelect;\n        }\n        if (key === Keys.ArrowDown && !altKey) {\n            return Actions.Next;\n        }\n        if (key === Keys.ArrowUp) {\n            return Actions.Previous;\n        }\n        if (key === Keys.ArrowRight) {\n            return Actions.OpenSub;\n        }\n        if (key === Keys.ArrowLeft) {\n            return Actions.CloseSub;\n        }\n        if (key === Keys.PageUp) {\n            return Actions.PageUp;\n        }\n        if (key === Keys.PageDown) {\n            return Actions.PageDown;\n        }\n        if (key === Keys.Escape) {\n            return Actions.Close;\n        }\n        if (key === Keys.Enter || key === Keys.Space) {\n            return Actions.Select;\n        }\n    }\n    return null;\n};\n\nexport const getUpdatedIndex = (action: Actions, index: number, items: DropdownNode[]) => {\n    const pageSize = 10; // Используется для pageup/pagedown\n    const maxIndex = items.length - 1;\n    let newIndex;\n\n    switch (action) {\n        case Actions.First:\n            newIndex = 0;\n            break;\n        case Actions.Last:\n            newIndex = maxIndex;\n            break;\n        case Actions.Previous:\n            newIndex = index - 1 >= 0 ? index - 1 : maxIndex;\n            break;\n        case Actions.Next:\n            newIndex = index + 1 <= maxIndex ? index + 1 : 0;\n            break;\n        case Actions.PageUp:\n            newIndex = Math.max(0, index - pageSize);\n            break;\n        case Actions.PageDown:\n            newIndex = Math.min(maxIndex, index + pageSize);\n            break;\n        default:\n            newIndex = index;\n    }\n\n    let item = items[newIndex];\n\n    while (item.isDisabled) {\n        if (action !== Actions.Previous) {\n            newIndex = items.length - 1 === newIndex + 1 ? 0 : newIndex + 1;\n        } else {\n            newIndex = newIndex - 1 === -1 ? items.length - 1 : newIndex - 1;\n        }\n        item = items[newIndex];\n    }\n\n    return newIndex;\n};\n\n// Фильтрует массив по входной строке\n// Возвращает массив параметров, которые начинаются со строки filter, независимо от регистра\nexport const filterOptions = (options: string[] = [], filter: string, exclude: string[] = []) => {\n    const lowerCaseFilter = filter.toLowerCase();\n    return options.filter((option) => {\n        const matches = option.toLowerCase().indexOf(lowerCaseFilter) === 0;\n        return matches && exclude.indexOf(option) < 0;\n    });\n};\n\n// Возвращает индекс параметра из массива параметров на основе строки поиска\n// Если filter - это несколько итераций одной и той же буквы (например, \"aaa\"), то ищем только по одной букве\nexport const getIndexByLetter = (options: string[], filter: string, startIndex = 0) => {\n    const orderedOptions = [...options.slice(startIndex), ...options.slice(0, startIndex)];\n    const firstMatch = filterOptions(orderedOptions, filter)[0];\n    const allSameLetter = (array: string[]) => array.every((letter) => letter === array[0]);\n\n    // Сначала проверяем, есть ли точное совпадение для введенной строки\n    if (firstMatch) {\n        return options.indexOf(firstMatch);\n    }\n\n    // Если повторяется одна и та же буква, то ищем только по одной букве\n    if (allSameLetter(filter.split(''))) {\n        const matches = filterOptions(orderedOptions, filter[0]);\n        return options.indexOf(matches[0]);\n    }\n\n    // Если нет совпадений, возвращаем -1\n\n    return -1;\n};\n"],"file":"utils.js"}