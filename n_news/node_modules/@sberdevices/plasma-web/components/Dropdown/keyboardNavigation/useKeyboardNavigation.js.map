{"version":3,"sources":["../../../src/components/Dropdown/keyboardNavigation/useKeyboardNavigation.ts"],"names":["INITIAL_INDEX","useKeyboardNavigation","items","isOpen","index","onToggle","onItemSelect","onIndexChange","getIndexByTyping","onKeyDown","event","length","action","Actions","Last","First","Next","Previous","PageUp","PageDown","preventDefault","Select","stopPropagation","Open","Close","Type","newIndex","key","undefined"],"mappings":";;;;;;;AAAA;;AAKA;;AACA;;AAWO,IAAMA,aAAa,GAAG,CAAtB;AAEP;AACA;AACA;AACA;;;;AACO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,OAOH;AAAA,MAN9BC,KAM8B,QAN9BA,KAM8B;AAAA,MAL9BC,MAK8B,QAL9BA,MAK8B;AAAA,wBAJ9BC,KAI8B;AAAA,MAJ9BA,KAI8B,2BAJtBJ,aAIsB;AAAA,MAH9BK,QAG8B,QAH9BA,QAG8B;AAAA,MAF9BC,YAE8B,QAF9BA,YAE8B;AAAA,MAD9BC,aAC8B,QAD9BA,aAC8B;AAC9B,MAAMC,gBAAgB,GAAG,oCAAe;AAAEJ,IAAAA,KAAK,EAALA,KAAF;AAASF,IAAAA,KAAK,EAALA;AAAT,GAAf,CAAzB;AAEA,MAAMO,SAAS,GAAG,wBACd,UAACC,KAAD,EAAW;AACP,QAAI,CAACR,KAAK,CAACS,MAAX,EAAmB;AACf;AACH;;AACD,QAAMC,MAAM,GAAG,6BAAiBF,KAAjB,EAAwBP,MAAxB,CAAf;;AAEA,QACIS,MAAM,KAAKC,eAAQC,IAAnB,IACAF,MAAM,KAAKC,eAAQE,KADnB,IAEAH,MAAM,KAAKC,eAAQG,IAFnB,IAGAJ,MAAM,KAAKC,eAAQI,QAHnB,IAIAL,MAAM,KAAKC,eAAQK,MAJnB,IAKAN,MAAM,KAAKC,eAAQM,QANvB,EAOE;AACET,MAAAA,KAAK,CAACU,cAAN;AACAb,MAAAA,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAG,4BAAgBK,MAAhB,EAAwBR,KAAxB,EAA+BF,KAA/B,CAAH,CAAb;AACH,KAVD,MAUO,IAAIU,MAAM,KAAKC,eAAQQ,MAAvB,EAA+B;AAClCX,MAAAA,KAAK,CAACY,eAAN;AACAZ,MAAAA,KAAK,CAACU,cAAN;AACAd,MAAAA,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAGJ,KAAK,CAACE,KAAD,CAAR,EAAiBM,KAAjB,CAAZ;AACH,KAJM,MAIA,IAAIE,MAAM,KAAKC,eAAQU,IAAvB,EAA6B;AAChCb,MAAAA,KAAK,CAACU,cAAN;AACAf,MAAAA,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAG,IAAH,EAASK,KAAT,CAAR;AACH,KAHM,MAGA,IAAIE,MAAM,KAAKC,eAAQW,KAAvB,EAA8B;AACjCd,MAAAA,KAAK,CAACU,cAAN;AACAf,MAAAA,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAG,KAAH,EAAUK,KAAV,CAAR;AACH,KAHM,MAGA,IAAIE,MAAM,KAAKC,eAAQY,IAAvB,EAA6B;AAChCf,MAAAA,KAAK,CAACU,cAAN;AACA,UAAMM,QAAQ,GAAGlB,gBAAgB,CAACE,KAAK,CAACiB,GAAP,CAAjC;;AACA,UAAID,QAAQ,KAAKE,SAAjB,EAA4B;AACxBrB,QAAAA,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAGmB,QAAH,CAAb;AACH;AACJ;AACJ,GAlCa,EAmCd,CAACvB,MAAD,EAASC,KAAT,EAAgBF,KAAhB,EAAuBK,aAAvB,EAAsCF,QAAtC,EAAgDG,gBAAhD,CAnCc,CAAlB;AAsCA,SAAO;AAAEC,IAAAA,SAAS,EAATA,SAAF;AAAaL,IAAAA,KAAK,EAALA;AAAb,GAAP;AACH,CAjDM","sourcesContent":["import { useCallback } from 'react';\n\nimport type { DropdownPopupProps } from '../DropdownPopup';\nimport type { DropdownNode, OnItemSelect, OnIndexChange } from '../Dropdown.types';\n\nimport { getActionFromKey, getUpdatedIndex, Actions } from './utils';\nimport { useOnComboType } from './useOnComboType';\n\nexport interface UseKeyboardNavigationProps {\n    items: DropdownNode[];\n    isOpen?: boolean;\n    index?: number;\n    onToggle?: DropdownPopupProps['onToggle'];\n    onItemSelect?: OnItemSelect;\n    onIndexChange?: OnIndexChange;\n}\n\nexport const INITIAL_INDEX = 0;\n\n/**\n * Клавиатурная навигация для дропдауна.\n * Работает для каждого инстанса дропдауна (попапа) отдельно.\n */\nexport const useKeyboardNavigation = ({\n    items,\n    isOpen,\n    index = INITIAL_INDEX,\n    onToggle,\n    onItemSelect,\n    onIndexChange,\n}: UseKeyboardNavigationProps) => {\n    const getIndexByTyping = useOnComboType({ index, items });\n\n    const onKeyDown = useCallback(\n        (event) => {\n            if (!items.length) {\n                return;\n            }\n            const action = getActionFromKey(event, isOpen);\n\n            if (\n                action === Actions.Last ||\n                action === Actions.First ||\n                action === Actions.Next ||\n                action === Actions.Previous ||\n                action === Actions.PageUp ||\n                action === Actions.PageDown\n            ) {\n                event.preventDefault();\n                onIndexChange?.(getUpdatedIndex(action, index, items));\n            } else if (action === Actions.Select) {\n                event.stopPropagation();\n                event.preventDefault();\n                onItemSelect?.(items[index], event);\n            } else if (action === Actions.Open) {\n                event.preventDefault();\n                onToggle?.(true, event);\n            } else if (action === Actions.Close) {\n                event.preventDefault();\n                onToggle?.(false, event);\n            } else if (action === Actions.Type) {\n                event.preventDefault();\n                const newIndex = getIndexByTyping(event.key);\n                if (newIndex !== undefined) {\n                    onIndexChange?.(newIndex);\n                }\n            }\n        },\n        [isOpen, index, items, onIndexChange, onToggle, getIndexByTyping],\n    );\n\n    return { onKeyDown, index };\n};\n"],"file":"useKeyboardNavigation.js"}