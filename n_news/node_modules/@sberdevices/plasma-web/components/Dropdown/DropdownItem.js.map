{"version":3,"sources":["../../src/components/Dropdown/DropdownItem.tsx"],"names":["StyledDropdownItem","styled","li","body1","fontFamily","fontSize","fontWeight","lineHeight","letterSpacing","$color","primary","surfaceLiquid02","$hover","css","surfaceLiquid03","$disabled","applyDisabled","StyledContent","div","StyledText","span","applyEllipsis","StyledChevron","IconChevronRight","StyledCheck","IconDone","StyledDot","accent","DropdownItem","value","label","isActive","isDisabled","isHovered","color","contentLeft","items","role","onClickExternal","onClick","onHover","onFocus","rest","ref","hasItems","Boolean","length","isActiveAsSingleOrNode","filter","item","contentRight","event","preventDefault","targetIsItem","target","current","targetInItem","contains","undefined"],"mappings":"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","sourcesContent":["import React, { useRef, useCallback, useMemo } from 'react';\nimport type { DetailedHTMLProps, HTMLAttributes, ReactNode, FC, SyntheticEvent } from 'react';\nimport styled, { css } from 'styled-components';\nimport {\n    body1,\n    accent,\n    primary,\n    surfaceLiquid02,\n    surfaceLiquid03,\n    applyDisabled,\n    applyEllipsis,\n} from '@sberdevices/plasma-core';\nimport { IconChevronRight, IconDone } from '@sberdevices/plasma-icons';\n\nimport type { DropdownItem as DropdownItemType, DropdownNode as DropdownNodeType } from './Dropdown.types';\n\nexport interface DropdownItemProps\n    extends DropdownNodeType,\n        Omit<DetailedHTMLProps<HTMLAttributes<HTMLLIElement>, HTMLLIElement>, 'onClick' | 'ref'> {\n    /**\n     * Цвет текста.\n     */\n    color?: string;\n    /**\n     * Слот для контента слева, например `Icon`.\n     */\n    contentLeft?: ReactNode;\n    /**\n     * Элемент активен (выбран).\n     */\n    isActive?: boolean;\n    /**\n     * Программный ховер (нужен для навигации с клавиатуры).\n     */\n    isHovered?: boolean;\n    onClick?: (item: DropdownItemType, event: SyntheticEvent) => void;\n    onHover?: () => void;\n    onFocus?: () => void;\n}\n\ninterface StyledDropdownItemProps {\n    $hover?: boolean;\n    $disabled?: boolean;\n    $color?: string;\n}\n\nconst StyledDropdownItem = styled.li<StyledDropdownItemProps>`\n    display: flex;\n    flex: 1;\n    align-items: center;\n    justify-content: flex-start;\n    box-sizing: border-box;\n\n    text-decoration: none;\n\n    height: var(--plasma-dropdown-item-height, 3rem);\n    padding: var(--plasma-dropdown-item-padding, 1rem);\n    border-radius: var(--plasma-dropdown-item-border-radius, 0);\n\n    font-family: var(--plasma-dropdown-item-font-family, ${body1.fontFamily});\n    font-size: var(--plasma-dropdown-item-font-size, ${body1.fontSize});\n    font-weight: var(--plasma-dropdown-item-font-weight, ${body1.fontWeight});\n    line-height: var(--plasma-dropdown-item-line-height, ${body1.lineHeight});\n    letter-spacing: var(--plasma-dropdown-item-letter-spacing, ${body1.letterSpacing});\n\n    background-color: transparent;\n    color: ${({ $color }) => $color || primary};\n    transition: background-color 0.3s ease-in-out;\n    cursor: pointer;\n\n    /* stylelint-disable-next-line selector-nested-pattern */\n    &:hover,\n    &:focus {\n        color: ${({ $color }) => $color || primary};\n        background-color: ${surfaceLiquid02};\n    }\n\n    &:focus {\n        outline: 0 none;\n    }\n\n    ${({ $hover, $color }) =>\n        $hover &&\n        css`\n            color: ${() => $color || primary};\n            background-color: ${surfaceLiquid02};\n        `}\n\n    &:active {\n        background-color: ${surfaceLiquid03};\n    }\n\n    ${({ $disabled }) =>\n        $disabled &&\n        css`\n            &,\n            &:hover,\n            &:focus,\n            &:active {\n                background-color: transparent;\n            }\n        `}\n    ${applyDisabled}\n`;\nconst StyledContent = styled.div`\n    display: inline-flex;\n    margin-right: 0.375rem;\n`;\nconst StyledText = styled.span`\n    ${applyEllipsis}\n\n    margin-right: 0.625rem;\n    pointer-events: none;\n    user-select: none;\n`;\nconst StyledChevron = styled(IconChevronRight)`\n    margin-left: auto;\n    pointer-events: none;\n    margin-right: -0.25rem;\n`;\nconst StyledCheck = styled(IconDone)`\n    margin-left: auto;\n    pointer-events: none;\n    margin-right: -0.5rem;\n`;\nconst StyledDot = styled.div`\n    width: 0.375rem;\n    height: 0.375rem;\n\n    background-color: ${accent};\n    border-radius: 50%;\n`;\n\n/**\n * Элемент выпадающего списка.\n */\nexport const DropdownItem: FC<DropdownItemProps> = ({\n    value,\n    label,\n    isActive,\n    isDisabled,\n    isHovered,\n    color,\n    contentLeft,\n    items = [],\n    role = 'menuitem',\n    onClick: onClickExternal,\n    onHover,\n    onFocus,\n    ...rest\n}) => {\n    const ref = useRef<HTMLLIElement>(null);\n    const hasItems = Boolean(items.length);\n    const isActiveAsSingleOrNode = Boolean(isActive || items.filter((item) => item.isActive)?.length);\n    const contentRight = useMemo(() => {\n        if (hasItems) {\n            return (\n                <>\n                    {isActiveAsSingleOrNode && <StyledDot />}\n                    <StyledChevron size=\"xs\" />\n                </>\n            );\n        }\n\n        if (isActive) {\n            return <StyledCheck size=\"s\" color={accent} />;\n        }\n\n        return null;\n    }, [isActive, isActiveAsSingleOrNode, hasItems]);\n\n    const onClick = useCallback(\n        (event) => {\n            event.preventDefault();\n\n            const targetIsItem = event.target === ref.current;\n            const targetInItem = ref.current?.contains(event.target);\n\n            if (value !== undefined && !isDisabled && (targetIsItem || targetInItem)) {\n                onClickExternal?.({ value, label }, event);\n            }\n        },\n        [value, label, isDisabled, onClickExternal],\n    );\n\n    return (\n        <StyledDropdownItem\n            {...rest}\n            ref={ref}\n            $hover={isHovered}\n            $disabled={isDisabled}\n            $color={color}\n            role={role}\n            aria-label={label}\n            aria-selected={role === 'option' ? isActiveAsSingleOrNode : undefined}\n            onClick={onClick}\n            onMouseOver={onHover}\n            onFocus={onFocus}\n        >\n            {contentLeft && <StyledContent>{contentLeft}</StyledContent>}\n            {label && <StyledText role=\"presentation\">{label}</StyledText>}\n            {contentRight}\n        </StyledDropdownItem>\n    );\n};\n"],"file":"DropdownItem.js"}