"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DropdownUncontrolled = void 0;

var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));

var _DropdownMenu = /*#__PURE__*/require("./DropdownMenu");

var _DropdownPopup = /*#__PURE__*/require("./DropdownPopup");

var _excluded = ["id", "isOpen", "items", "children", "offsetTop", "disabled", "style", "className", "hoverIndex", "placement", "trigger", "onBlur", "onKeyDown", "onToggle", "onItemSelect"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * Выпадающий список с внешнего контроля видимости через пропы `isOpen` и `onToggle`.
 */
var DropdownUncontrolled = function DropdownUncontrolled(_ref) {
  var id = _ref.id,
      isOpen = _ref.isOpen,
      items = _ref.items,
      children = _ref.children,
      offsetTop = _ref.offsetTop,
      disabled = _ref.disabled,
      style = _ref.style,
      className = _ref.className,
      hoverIndex = _ref.hoverIndex,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'bottom' : _ref$placement,
      _ref$trigger = _ref.trigger,
      trigger = _ref$trigger === void 0 ? 'click' : _ref$trigger,
      onBlur = _ref.onBlur,
      onKeyDown = _ref.onKeyDown,
      onToggleExternal = _ref.onToggle,
      onItemSelect = _ref.onItemSelect,
      rest = _objectWithoutProperties(_ref, _excluded);

  var hasItems = Array.isArray(items) && items.length > 0;
  var onToggle = (0, _react.useCallback)(function (newIsOpen, event) {
    if (newIsOpen && hasItems && !disabled) {
      onToggleExternal === null || onToggleExternal === void 0 ? void 0 : onToggleExternal(true, event);
    } else {
      onToggleExternal === null || onToggleExternal === void 0 ? void 0 : onToggleExternal(false, event);
    }
  }, [onToggleExternal, disabled, hasItems]);
  return /*#__PURE__*/_react["default"].createElement(_DropdownPopup.DropdownPopup, {
    isOpen: isOpen,
    trigger: trigger,
    placement: placement,
    disclosure: children,
    offsetTop: offsetTop,
    style: style,
    className: className,
    onToggle: onToggle,
    onKeyDown: onKeyDown,
    onBlur: onBlur
  }, /*#__PURE__*/_react["default"].createElement(_DropdownMenu.DropdownMenu, _extends({}, rest, {
    id: id,
    items: items,
    hoverIndex: hoverIndex,
    onItemSelect: onItemSelect
  })));
};

exports.DropdownUncontrolled = DropdownUncontrolled;
//# sourceMappingURL=DropdownUncontrolled.js.map