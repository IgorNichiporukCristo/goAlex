"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Badge = exports.badgeViews = void 0;

var _styledComponents = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("styled-components"));

var _plasmaCore = /*#__PURE__*/require("@sberdevices/plasma-core");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var badgeViews = {
  primary: /*#__PURE__*/(0, _styledComponents.css)(["color:#226af1;background-color:rgba(34,106,241,0.09);"]),
  secondary: /*#__PURE__*/(0, _styledComponents.css)(["color:", ";background-color:", ";"], _plasmaCore.text, _plasmaCore.surfaceLiquid02),
  success: /*#__PURE__*/(0, _styledComponents.css)(["color:#09a552;background-color:rgba(9,165,82,0.08);"]),
  warning: /*#__PURE__*/(0, _styledComponents.css)(["color:#ee6820;background-color:rgba(238,104,32,0.08);"]),
  critical: /*#__PURE__*/(0, _styledComponents.css)(["color:#df2638;background-color:rgba(223,38,56,0.09);"])
};
exports.badgeViews = badgeViews;

/**
 * Небольшая бирка для ячеек и карточек.
 * Компонент может отображаться в нескольких размерах и цветах, может содержать текст и/или иконку.
 */
var Badge = /*#__PURE__*/(0, _styledComponents["default"])(_plasmaCore.Badge).withConfig({
  componentId: "plasma-web__sc-odvhrx-0"
})(["border-radius:0.25rem;", ""], function (_ref) {
  var _ref$view = _ref.view,
      view = _ref$view === void 0 ? 'primary' : _ref$view;
  return badgeViews[view];
});
exports.Badge = Badge;
//# sourceMappingURL=Badge.js.map