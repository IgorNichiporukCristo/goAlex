"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tooltip = void 0;

var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));

var _styledComponents = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("styled-components"));

var _plasmaCore = /*#__PURE__*/require("@sberdevices/plasma-core");

var _reactPopper = /*#__PURE__*/require("react-popper");

var _excluded = ["id", "text", "isVisible", "arrow", "animated", "placement", "children", "onDismiss"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ESCAPE_KEYCODE = 27;
var offset = [0, 6];

var StyledRoot = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma-web__sc-veq9r4-0"
})(["position:relative;display:inline-flex;"]);

var StyledWrapper = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma-web__sc-veq9r4-1"
})(["display:inherit;"]);

var StyledArrow = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma-web__sc-veq9r4-2"
})(["visibility:hidden;&,&::before{position:absolute;width:0.5rem;height:0.5rem;background:inherit;}&::before{visibility:visible;content:'';transform:rotate(45deg);}"]);

var StyledTooltip = /*#__PURE__*/_styledComponents["default"].span.withConfig({
  componentId: "plasma-web__sc-veq9r4-3"
})(["", " position:absolute;z-index:9200;padding:0.375rem 0.5rem;background-color:", ";border-radius:0.25rem;box-shadow:", ";color:", ";white-space:pre;pointer-events:none;transition:opacity 200ms ease-in-out;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;&[data-popper-placement^='top'] > ", "{bottom:-0.25rem;}&[data-popper-placement^='bottom'] > ", "{top:-0.25rem;}&[data-popper-placement^='left'] > ", "{right:-0.25rem;}&[data-popper-placement^='right'] > ", "{left:-0.25rem;}", ""], _plasmaCore.caption, _plasmaCore.dark02, _plasmaCore.shadows.small, _plasmaCore.white, StyledArrow, StyledArrow, StyledArrow, StyledArrow, function (_ref) {
  var isVisible = _ref.isVisible,
      animated = _ref.animated;
  return animated && (0, _styledComponents.css)(["opacity:", ";"], Number(isVisible));
});
/**
 * Компонент для текстовых подсказок. Основное предназначение — подписи к блокам.
 */


var Tooltip = function Tooltip(_ref2) {
  var id = _ref2.id,
      text = _ref2.text,
      isVisible = _ref2.isVisible,
      _ref2$arrow = _ref2.arrow,
      arrow = _ref2$arrow === void 0 ? true : _ref2$arrow,
      _ref2$animated = _ref2.animated,
      animated = _ref2$animated === void 0 ? true : _ref2$animated,
      _ref2$placement = _ref2.placement,
      placement = _ref2$placement === void 0 ? 'bottom' : _ref2$placement,
      children = _ref2.children,
      onDismiss = _ref2.onDismiss,
      rest = _objectWithoutProperties(_ref2, _excluded);

  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      wrapperElement = _useState2[0],
      setWrapperElement = _useState2[1];

  var _useState3 = (0, _react.useState)(null),
      _useState4 = _slicedToArray(_useState3, 2),
      tooltipElement = _useState4[0],
      setTooltipElement = _useState4[1];

  var _useState5 = (0, _react.useState)(null),
      _useState6 = _slicedToArray(_useState5, 2),
      arrowElement = _useState6[0],
      setArrowElement = _useState6[1];

  var _usePopper = (0, _reactPopper.usePopper)(wrapperElement, tooltipElement, {
    placement: placement,
    modifiers: [{
      name: 'offset',
      options: {
        offset: [offset[0], offset[1]]
      }
    }, {
      name: 'arrow',
      options: {
        element: arrowElement,
        padding: 10
      }
    }]
  }),
      styles = _usePopper.styles,
      attributes = _usePopper.attributes;

  (0, _react.useEffect)(function () {
    var onKeyDown = function onKeyDown(event) {
      if (event.keyCode === ESCAPE_KEYCODE) {
        onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss();
      }
    };

    window.addEventListener('keydown', onKeyDown);
    return function () {
      window.removeEventListener('keydown', onKeyDown);
    };
  }, []);
  return /*#__PURE__*/_react["default"].createElement(StyledRoot, rest, children && /*#__PURE__*/_react["default"].createElement(StyledWrapper, {
    ref: setWrapperElement
  }, children), /*#__PURE__*/_react["default"].createElement(StyledTooltip, _extends({}, attributes.popper, {
    ref: setTooltipElement,
    id: id,
    isVisible: isVisible,
    animated: animated,
    style: styles.popper,
    role: "tooltip",
    "aria-live": "polite",
    "aria-hidden": !isVisible
  }), arrow && /*#__PURE__*/_react["default"].createElement(StyledArrow, _extends({
    ref: setArrowElement,
    style: styles.arrow
  }, attributes.arrow)), text));
};

exports.Tooltip = Tooltip;
//# sourceMappingURL=Tooltip.js.map