{"version":3,"sources":["../../src/components/Notification/Notification.tsx"],"names":["statuses","success","css","warning","error","critical","StyledRoot","styled","div","surfaceCard","StyledTitle","Headline5","status","StyledContent","footnote1","secondary","Notification","React","forwardRef","ref","role","title","content","children","rest","ariaLive","ariaAtomic"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAGA;;;;;;;;;;;;;;;;AAEA,IAAMA,QAAQ,GAAG;AACbC,EAAAA,OAAO,mBAAEC,qBAAF,qBADM;AAIbC,EAAAA,OAAO,mBAAED,qBAAF,mBACMC,mBADN,CAJM;AAObC,EAAAA,KAAK,mBAAEF,qBAAF,mBACQG,oBADR;AAPQ,CAAjB;;AA2BA,IAAMC,UAAU,gBAAGC,6BAAOC,GAAV;AAAA;AAAA,+MASEC,uBATF,CAAhB;;AAaA,IAAMC,WAAW,gBAAG,kCAAOC,qBAAP,CAAH;AAAA;AAAA,kCAGX;AAAA,MAAGC,MAAH,QAAGA,MAAH;AAAA,SAAgBA,MAAM,IAAIZ,QAAQ,CAACY,MAAD,CAAlC;AAAA,CAHW,CAAjB;;AAKA,IAAMC,aAAa,gBAAGN,6BAAOC,GAAV;AAAA;AAAA,yBACbM,qBADa,EAENC,qBAFM,CAAnB;AAKA;AACA;AACA;;;AACO,IAAMC,YAAY,gBAAGC,kBAAMC,UAAN,CACxB,iBAAiEC,GAAjE,EAAyE;AAAA,yBAAtEC,IAAsE;AAAA,MAAtEA,IAAsE,2BAA/D,QAA+D;AAAA,MAArDR,MAAqD,SAArDA,MAAqD;AAAA,MAA7CS,KAA6C,SAA7CA,KAA6C;AAAA,MAA5BC,OAA4B,SAAtCC,QAAsC;AAAA,MAAhBC,IAAgB;;AACrE,MAAIC,QAAgC,GAAG,QAAvC;AACA,MAAIC,UAAU,GAAG,KAAjB;;AAEA,MAAIN,IAAI,KAAK,OAAb,EAAsB;AAClBK,IAAAA,QAAQ,GAAG,WAAX;AACH,GAFD,MAEO,IAAIL,IAAI,KAAK,QAAb,EAAuB;AAC1BM,IAAAA,UAAU,GAAG,IAAb;AACH;;AAED,sBACI,gCAAC,UAAD;AAAY,IAAA,GAAG,EAAEP,GAAjB;AAAsB,IAAA,IAAI,EAAEC,IAA5B;AAAkC,iBAAWK,QAA7C;AAAuD,mBAAaC;AAApE,KAAoFF,IAApF,gBACI,gCAAC,WAAD;AAAa,IAAA,MAAM,EAAEZ;AAArB,KAA8BS,KAA9B,CADJ,eAEI,gCAAC,aAAD,QAAgBC,OAAhB,CAFJ,CADJ;AAMH,CAjBuB,CAArB","sourcesContent":["import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { surfaceCard, secondary, warning, critical, footnote1 } from '@sberdevices/plasma-core';\nimport type { AsProps } from '@sberdevices/plasma-core';\n\nimport { Headline5 } from '../Typography';\n\nconst statuses = {\n    success: css`\n        color: #09a552;\n    `,\n    warning: css`\n        color: ${warning};\n    `,\n    error: css`\n        color: ${critical};\n    `,\n};\n\nexport interface NotificationProps extends AsProps, React.HTMLAttributes<HTMLDivElement> {\n    /**\n     * Заголовок.\n     */\n    title?: string;\n    /**\n     * Контент.\n     */\n    children?: React.ReactNode;\n    /**\n     * Статус - цветовая индикация сообщения.\n     */\n    status?: keyof typeof statuses;\n}\n\nconst StyledRoot = styled.div`\n    position: relative;\n\n    box-sizing: border-box;\n\n    width: 100%;\n    max-width: 18.75rem;\n    padding: 1rem 1.25rem;\n\n    background: ${surfaceCard};\n    box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.05), 0px 4px 14px rgba(0, 0, 0, 0.08);\n    border-radius: 0.5rem;\n`;\nconst StyledTitle = styled(Headline5)<Pick<NotificationProps, 'status'>>`\n    margin-bottom: 0.5rem;\n\n    ${({ status }) => status && statuses[status]}\n`;\nconst StyledContent = styled.div`\n    ${footnote1};\n    color: ${secondary};\n`;\n\n/**\n * Компонент для небольших уведомлений пользователя\n */\nexport const Notification = React.forwardRef<HTMLDivElement, NotificationProps>(\n    ({ role = 'status', status, title, children: content, ...rest }, ref) => {\n        let ariaLive: 'assertive' | 'polite' = 'polite';\n        let ariaAtomic = false;\n\n        if (role === 'alert') {\n            ariaLive = 'assertive';\n        } else if (role === 'status') {\n            ariaAtomic = true;\n        }\n\n        return (\n            <StyledRoot ref={ref} role={role} aria-live={ariaLive} aria-atomic={ariaAtomic} {...rest}>\n                <StyledTitle status={status}>{title}</StyledTitle>\n                <StyledContent>{content}</StyledContent>\n            </StyledRoot>\n        );\n    },\n);\n"],"file":"Notification.js"}