function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React from 'react';
import { mount, CypressTestDecorator, getComponent } from '@sberdevices/plasma-cy-utils';
describe('plasma-web: Tooltip', function () {
  var Tooltip = getComponent('Tooltip');
  var Button = getComponent('Button');
  it('simple', function () {
    mount( /*#__PURE__*/React.createElement(CypressTestDecorator, null, /*#__PURE__*/React.createElement(Tooltip, {
      text: "\u0412\u044B\u0441\u043E\u043A\u043E\u0435 \u043A\u0430\u0447\u0435\u0441\u0442\u0432\u043E \u0432\u043E\u0441\u043F\u0440\u043E\u0438\u0437\u0432\u0435\u0434\u0435\u043D\u0438\u044F",
      isVisible: true,
      placement: "right"
    }, /*#__PURE__*/React.createElement(Button, {
      text: "hello"
    }))));
    cy.matchImageSnapshot();
  });
  it('multiple placement', function () {
    var Container = function Container(_ref) {
      var children = _ref.children;
      return /*#__PURE__*/React.createElement("div", {
        style: {
          display: 'grid',
          gridTemplateColumns: 'repeat(3, max-content)',
          gridGap: '1rem 3.5rem',
          padding: '2.5rem'
        }
      }, children);
    };

    mount( /*#__PURE__*/React.createElement(CypressTestDecorator, null, /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(Tooltip, {
      placement: "top-start",
      isVisible: true,
      arrow: true,
      text: "Top start",
      animated: false
    }, /*#__PURE__*/React.createElement(Tooltip, {
      placement: "left",
      isVisible: true,
      arrow: true,
      text: "Left",
      animated: false
    }, /*#__PURE__*/React.createElement(Button, {
      text: "hello"
    }))), /*#__PURE__*/React.createElement(Tooltip, {
      placement: "top",
      isVisible: true,
      arrow: true,
      text: "Top",
      animated: false
    }, /*#__PURE__*/React.createElement(Button, {
      text: "hello"
    })), /*#__PURE__*/React.createElement(Tooltip, {
      placement: "top-end",
      isVisible: true,
      arrow: true,
      text: "Top end",
      animated: false
    }, /*#__PURE__*/React.createElement(Tooltip, {
      placement: "right",
      isVisible: true,
      arrow: true,
      text: "Right",
      animated: false
    }, /*#__PURE__*/React.createElement(Button, {
      text: "hello"
    }))), /*#__PURE__*/React.createElement(Tooltip, {
      placement: "bottom-start",
      isVisible: true,
      arrow: true,
      text: "Bottom start",
      animated: false
    }, /*#__PURE__*/React.createElement(Button, {
      text: "hello"
    })), /*#__PURE__*/React.createElement(Tooltip, {
      placement: "bottom",
      isVisible: true,
      arrow: true,
      text: "Bottom",
      animated: false
    }, /*#__PURE__*/React.createElement(Button, {
      text: "hello"
    })), /*#__PURE__*/React.createElement(Tooltip, {
      placement: "bottom-end",
      isVisible: true,
      arrow: true,
      text: "Bottom end",
      animated: false
    }, /*#__PURE__*/React.createElement(Button, {
      text: "hello"
    })))));
    cy.matchImageSnapshot();
  });
  it('interaction', function () {
    function Demo() {
      var _React$useState = React.useState(false),
          _React$useState2 = _slicedToArray(_React$useState, 2),
          isVisible = _React$useState2[0],
          setVisible = _React$useState2[1];

      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tooltip, {
        isVisible: isVisible,
        placement: "bottom",
        text: "Hello there"
      }, /*#__PURE__*/React.createElement(Button, {
        text: "Toggle",
        onClick: function onClick() {
          setVisible(function (isVis) {
            return !isVis;
          });
        }
      })));
    }

    mount( /*#__PURE__*/React.createElement(CypressTestDecorator, null, /*#__PURE__*/React.createElement(Demo, null)));
    cy.get('button').click();
    cy.matchImageSnapshot();
  });
  it('out of bounds', function () {
    var Container = function Container(_ref2) {
      var children = _ref2.children;
      return /*#__PURE__*/React.createElement("div", {
        style: {
          display: 'flex',
          gap: '4rem'
        }
      }, children);
    };

    mount( /*#__PURE__*/React.createElement(CypressTestDecorator, null, /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(Tooltip, {
      placement: "left",
      isVisible: true,
      arrow: true,
      text: "Left",
      animated: false
    }, /*#__PURE__*/React.createElement(Button, {
      text: "hello"
    })), /*#__PURE__*/React.createElement(Tooltip, {
      placement: "top",
      isVisible: true,
      arrow: true,
      text: "Top",
      animated: false
    }, /*#__PURE__*/React.createElement(Button, {
      text: "hello"
    })))));
    cy.matchImageSnapshot();
  });
});
//# sourceMappingURL=Tooltip.component-test.js.map