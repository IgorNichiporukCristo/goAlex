var _excluded = ["size", "offset"];

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import styled, { css } from 'styled-components';
import { Col as BaseCol, sizes as baseSizes, offsets as baseOffsets } from '@sberdevices/plasma-core';
import { gridColumns, gridSizes, mediaQuery } from '../../utils';
export var sizes = /*#__PURE__*/_objectSpread({
  XXL: 'sizeXXL'
}, baseSizes);
export var offsets = /*#__PURE__*/_objectSpread({
  XXL: 'offsetXXL'
}, baseOffsets);
var deviceScale = 1;
/**
 * Блок для размещения контента или строк (``Row``) внутри себя.
 */

export var Col = /*#__PURE__*/styled(BaseCol).withConfig({
  componentId: "plasma-web__sc-1czxsi1-0"
})(["", ""], function (_ref) {
  var size = _ref.size,
      offset = _ref.offset,
      props = _objectWithoutProperties(_ref, _excluded);

  return gridSizes.map(function (breakpoint) {
    var bpSize = sizes[breakpoint];
    var bpOffset = offsets[breakpoint];
    var colSize = props[bpSize] || size;
    var colOffset = props[bpOffset] || offset;
    return mediaQuery(breakpoint, deviceScale)(css(["", " ", ""], colSize && "width: ".concat(100 / gridColumns[breakpoint] * colSize, "%;"), colOffset && "margin-left: ".concat(100 / gridColumns[breakpoint] * colOffset, "%;")));
  });
});
//# sourceMappingURL=Col.js.map