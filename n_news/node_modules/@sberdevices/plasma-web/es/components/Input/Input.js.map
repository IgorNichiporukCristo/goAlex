{"version":3,"sources":["../../../src/components/Input/Input.tsx"],"names":["React","forwardRef","styled","css","inputTypo","inputLabelTypo","inputBackground","inputBackgroundHover","inputBackgroundFocus","inputColor","inputCaretColor","inputPlaceholderColor","inputFocusPlaceholderColor","inputBorder","inputBorderHover","inputBorderFocus","inputBorderRadius","inputBorderWidth","inputLabelColor","inputLabelMarginTop","sizes","statuses","StyledHint","span","StyledLabel","StyledPlaceholder","getPadding","paddingTop","paddingBottom","paddingLeft","paddingRight","paddingY","paddingX","applySizes","$size","$hasHint","$hasContentLeft","$hasContentRight","$animatedHint","height","hasLabelPaddingTop","hasContentPaddingLeft","hasContentPaddingRight","hasLabelPaddingBottom","padding","StyledInput","input","$status","$hasLabel","InputPlaceLabel","animatedHint","placeholder","label","Input","ref","size","disabled","status","hasContentLeft","hasContentRight","rest","Boolean"],"mappings":"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","sourcesContent":["import React, { FC, forwardRef } from 'react';\nimport styled, { css, InterpolationFunction } from 'styled-components';\nimport type { InputHTMLAttributes } from '@sberdevices/plasma-core';\n\nimport {\n    inputTypo,\n    inputLabelTypo,\n    inputBackground,\n    inputBackgroundHover,\n    inputBackgroundFocus,\n    inputColor,\n    inputCaretColor,\n    inputPlaceholderColor,\n    inputFocusPlaceholderColor,\n    inputBorder,\n    inputBorderHover,\n    inputBorderFocus,\n    inputBorderRadius,\n    inputBorderWidth,\n    inputLabelColor,\n    inputLabelMarginTop,\n} from '../../tokens';\n\nimport { sizes, statuses } from './Input.props';\n\nexport interface InputProps extends Omit<InputHTMLAttributes<HTMLInputElement>, 'size'> {\n    /**\n     * Размер контрола.\n     */\n    size?: keyof typeof sizes;\n    /**\n     * Статус компонента: заполнен успешно / с ошибкой.\n     */\n    status?: keyof typeof statuses;\n    /**\n     * Анимированные подсказки внутри инпута. Отображается только в размере `l`.\n     */\n    animatedHint?: 'label' | 'placeholder';\n    /**\n     * Лейбл сверху. Отображается только в размере `l`.\n     */\n    label?: string | number;\n    hasContentLeft?: boolean;\n    hasContentRight?: boolean;\n}\n\nconst StyledHint = styled.span`\n    display: flex;\n    align-items: center;\n    transition: all 0.1s ease-in-out;\n\n    box-sizing: border-box;\n    position: absolute;\n    top: 0;\n    left: 0;\n    pointer-events: none;\n\n    color: ${inputLabelColor};\n`;\nconst StyledLabel = styled(StyledHint)`\n    ${inputTypo}\n\n    input:focus + &,\n    input:not(:placeholder-shown) + & {\n        ${inputLabelTypo}\n    }\n`;\nconst StyledPlaceholder = styled(StyledHint)`\n    ${inputLabelTypo}\n\n    input:placeholder-shown + & {\n        ${inputTypo}\n    }\n\n    input:focus + & {\n        color: ${inputFocusPlaceholderColor};\n    }\n`;\n\ninterface StyledInputProps {\n    $size: keyof typeof sizes;\n    $status?: keyof typeof statuses;\n    $hasHint?: boolean;\n    $hasContentLeft?: boolean;\n    $hasContentRight?: boolean;\n    $animatedHint?: InputProps['animatedHint'];\n}\n\nconst getPadding = (\n    paddingTop: string,\n    paddingBottom: string,\n    paddingLeft: string,\n    paddingRight: string,\n    paddingY: string,\n    paddingX: string,\n) => {\n    switch (true) {\n        case paddingTop !== paddingBottom && paddingLeft !== paddingRight:\n            return `${paddingTop} ${paddingRight} ${paddingBottom} ${paddingLeft}`;\n        case paddingTop !== paddingBottom:\n            return `${paddingTop} ${paddingX} ${paddingBottom}`;\n        case paddingLeft !== paddingRight:\n            return `${paddingY} ${paddingRight} ${paddingY} ${paddingLeft}`;\n        default:\n            return `${paddingY} ${paddingX}`;\n    }\n};\n\nconst applySizes: InterpolationFunction<StyledInputProps> = () => ({\n    $size,\n    $hasHint,\n    $hasContentLeft,\n    $hasContentRight,\n    $animatedHint,\n}) => {\n    const {\n        height,\n        paddingY,\n        paddingX,\n        hasLabelPaddingTop,\n        hasContentPaddingLeft,\n        hasContentPaddingRight,\n        hasLabelPaddingBottom,\n    } = sizes[$size];\n    const paddingTop = $hasHint ? hasLabelPaddingTop : paddingY;\n    const paddingBottom = $hasHint ? hasLabelPaddingBottom : paddingY;\n    const paddingLeft = $hasContentLeft ? hasContentPaddingLeft : paddingX;\n    const paddingRight = $hasContentRight ? hasContentPaddingRight : paddingX;\n    const padding = getPadding(paddingTop, paddingBottom, paddingLeft, paddingRight, paddingY, paddingX);\n\n    return css`\n        height: ${height};\n        padding: ${padding};\n\n        ${\n            $animatedHint === 'placeholder' &&\n            css`\n                &:placeholder-shown {\n                    padding-top: ${paddingY};\n                    padding-bottom: ${paddingY};\n                }\n            `\n        }\n\n        & + ${StyledHint} {\n            height: ${height};\n            padding: ${paddingY} ${paddingLeft} ${paddingY} ${paddingRight};\n        }\n\n        &:focus + ${StyledLabel},\n        &:not(:placeholder-shown) + ${StyledLabel},\n        &:not(:placeholder-shown) + ${StyledPlaceholder} {\n            height: auto;\n            padding-top: ${inputLabelMarginTop};\n        }\n    `;\n};\n\nconst StyledInput = styled.input<StyledInputProps>`\n    ${applySizes}\n    ${inputTypo}\n\n    box-sizing: border-box;\n    width: 100%;\n\n    background-color: ${inputBackground};\n    color: ${inputColor};\n    caret-color: ${inputCaretColor};\n    border: 0 none;\n    border-radius: ${inputBorderRadius};\n    box-shadow: inset 0 0 0 ${inputBorderWidth} ${inputBorder};\n\n    transition: box-shadow 0.1s ease-in, background-color 0.1s ease-in, color 0.1s ease-in;\n\n    &:hover {\n        background-color: ${inputBackgroundHover};\n        box-shadow: inset 0 0 0 ${inputBorderWidth} ${inputBorderHover};\n    }\n\n    &:disabled {\n        box-shadow: inset 0 0 0 ${inputBorderWidth} ${inputBorder};\n        cursor: inherit;\n    }\n\n    &::placeholder {\n        color: ${inputPlaceholderColor};\n    }\n\n    ${({ $status }) => $status && statuses[$status]}\n\n    &:focus,\n    &:hover:focus {\n        background-color: ${inputBackgroundFocus};\n        box-shadow: inset 0 0 0 ${inputBorderWidth} ${inputBorderFocus};\n        outline: 0 none;\n    }\n\n    &:focus::placeholder {\n        color: ${inputFocusPlaceholderColor};\n    }\n\n    ${({ $animatedHint }) =>\n        $animatedHint === 'placeholder' &&\n        css`\n            &::placeholder,\n            &:focus::placeholder {\n                color: transparent;\n            }\n        `}\n\n    ${({ $hasHint: $hasLabel }) =>\n        $hasLabel &&\n        css`\n            &::placeholder {\n                color: transparent;\n            }\n        `}\n`;\n\nconst InputPlaceLabel: FC<Pick<InputProps, 'animatedHint' | 'placeholder' | 'label'>> = ({\n    animatedHint,\n    placeholder,\n    label,\n}) => {\n    if (animatedHint === 'placeholder' && placeholder) {\n        return <StyledPlaceholder>{placeholder}</StyledPlaceholder>;\n    }\n    if (animatedHint === 'label' && label) {\n        return <StyledLabel>{label}</StyledLabel>;\n    }\n    return null;\n};\n\n/**\n * Поле ввода текста без подсказки и лейбла.\n * @private\n */\n// eslint-disable-next-line prefer-arrow-callback\nexport const Input = forwardRef<HTMLInputElement, InputProps>(function Input(\n    { size = 'l', disabled, status, placeholder, label, animatedHint, hasContentLeft, hasContentRight, ...rest },\n    ref,\n) {\n    return (\n        <>\n            <StyledInput\n                ref={ref}\n                disabled={disabled}\n                placeholder={placeholder}\n                $size={size}\n                $status={status}\n                $hasHint={animatedHint && Boolean(label || placeholder)}\n                $hasContentLeft={hasContentLeft}\n                $hasContentRight={hasContentRight}\n                $animatedHint={animatedHint}\n                {...rest}\n            />\n            {size === 'l' && animatedHint && (\n                <InputPlaceLabel animatedHint={animatedHint} placeholder={placeholder} label={label} />\n            )}\n        </>\n    );\n});\n"],"file":"Input.js"}