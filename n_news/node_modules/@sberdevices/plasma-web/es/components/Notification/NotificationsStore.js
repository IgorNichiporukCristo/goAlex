var _excluded = ["id"];

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { createStoreon } from 'storeon';

/**
 * Создает хранилищие с ключем `notifications` к массиву с окнами.
 */
export var NotificationsStore = /*#__PURE__*/createStoreon([function (store) {
  store.on('@init', function () {
    return {
      notifications: []
    };
  });
  store.on('add', function (_ref, notif) {
    var notifications = _ref.notifications;
    return {
      notifications: notifications.concat([notif])
    };
  });
  store.on('hide', function (_ref2, id) {
    var notifications = _ref2.notifications;
    return {
      notifications: notifications.map(function (notif) {
        return id === notif.id ? _objectSpread(_objectSpread({}, notif), {}, {
          isHiding: true
        }) : notif;
      })
    };
  });
  store.on('remove', function (_ref3, id) {
    var notifications = _ref3.notifications;
    return {
      notifications: notifications.filter(function (notif) {
        return id !== notif.id;
      })
    };
  });
}]);
export var closeNotification = function closeNotification(id) {
  var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 380;
  var dispatch = NotificationsStore.dispatch;
  dispatch('hide', id);
  setTimeout(function () {
    return dispatch('remove', id);
  }, delay);
};
/**
 * Открыть новое окно.
 * @param props Пропсы всплывающего окна
 * @return Идентификатор нового окна
 */

export function addNotification(_ref4) {
  var externalId = _ref4.id,
      rest = _objectWithoutProperties(_ref4, _excluded);

  var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2000;
  var id = externalId || "plasma-notification-".concat(Date.now());
  var dispatch = NotificationsStore.dispatch;
  dispatch('add', _objectSpread(_objectSpread({}, rest), {}, {
    id: id,
    isHiding: false
  }));
  setTimeout(function () {
    return closeNotification(id);
  }, timeout);
  return id;
}
//# sourceMappingURL=NotificationsStore.js.map