{"version":3,"sources":["../../../src/components/Notification/NotificationsStore.ts"],"names":["createStoreon","NotificationsStore","store","on","notifications","notif","concat","id","map","isHiding","filter","closeNotification","delay","dispatch","setTimeout","addNotification","externalId","rest","timeout","Date","now"],"mappings":";;;;;;;;;;;;AAAA,SAASA,aAAT,QAA4C,SAA5C;;AAiBA;AACA;AACA;AACA,OAAO,IAAMC,kBAAkB,gBAAGD,aAAa,CAAC,CAC5C,UAACE,KAAD,EAAkE;AAC9DA,EAAAA,KAAK,CAACC,EAAN,CAAS,OAAT,EAAkB;AAAA,WAAO;AAAEC,MAAAA,aAAa,EAAE;AAAjB,KAAP;AAAA,GAAlB;AAEAF,EAAAA,KAAK,CAACC,EAAN,CAAS,KAAT,EAAgB,gBAAoBE,KAApB,EAA8B;AAAA,QAA3BD,aAA2B,QAA3BA,aAA2B;AAC1C,WAAO;AAAEA,MAAAA,aAAa,EAAEA,aAAa,CAACE,MAAd,CAAqB,CAACD,KAAD,CAArB;AAAjB,KAAP;AACH,GAFD;AAIAH,EAAAA,KAAK,CAACC,EAAN,CAAS,MAAT,EAAiB,iBAAoBI,EAApB,EAA2B;AAAA,QAAxBH,aAAwB,SAAxBA,aAAwB;AACxC,WAAO;AACHA,MAAAA,aAAa,EAAEA,aAAa,CAACI,GAAd,CAAkB,UAACH,KAAD;AAAA,eAAYE,EAAE,KAAKF,KAAK,CAACE,EAAb,mCAAuBF,KAAvB;AAA8BI,UAAAA,QAAQ,EAAE;AAAxC,aAAiDJ,KAA7D;AAAA,OAAlB;AADZ,KAAP;AAGH,GAJD;AAMAH,EAAAA,KAAK,CAACC,EAAN,CAAS,QAAT,EAAmB,iBAAoBI,EAApB,EAA2B;AAAA,QAAxBH,aAAwB,SAAxBA,aAAwB;AAC1C,WAAO;AAAEA,MAAAA,aAAa,EAAEA,aAAa,CAACM,MAAd,CAAqB,UAACL,KAAD;AAAA,eAAWE,EAAE,KAAKF,KAAK,CAACE,EAAxB;AAAA,OAArB;AAAjB,KAAP;AACH,GAFD;AAGH,CAjB2C,CAAD,CAAxC;AAoBP,OAAO,IAAMI,iBAAiB,GAAG,SAApBA,iBAAoB,CAACJ,EAAD,EAA6B;AAAA,MAAhBK,KAAgB,uEAAR,GAAQ;AAC1D,MAAQC,QAAR,GAAqBZ,kBAArB,CAAQY,QAAR;AAEAA,EAAAA,QAAQ,CAAC,MAAD,EAASN,EAAT,CAAR;AACAO,EAAAA,UAAU,CAAC;AAAA,WAAMD,QAAQ,CAAC,QAAD,EAAWN,EAAX,CAAd;AAAA,GAAD,EAA+BK,KAA/B,CAAV;AACH,CALM;AAOP;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,eAAT,QAAyF;AAAA,MAA1DC,UAA0D,SAA9DT,EAA8D;AAAA,MAA3CU,IAA2C;;AAAA,MAAhBC,OAAgB,uEAAN,IAAM;AAC5F,MAAMX,EAAE,GAAGS,UAAU,kCAA2BG,IAAI,CAACC,GAAL,EAA3B,CAArB;AACA,MAAQP,QAAR,GAAqBZ,kBAArB,CAAQY,QAAR;AAEAA,EAAAA,QAAQ,CAAC,KAAD,kCACDI,IADC;AAEJV,IAAAA,EAAE,EAAFA,EAFI;AAGJE,IAAAA,QAAQ,EAAE;AAHN,KAAR;AAMAK,EAAAA,UAAU,CAAC;AAAA,WAAMH,iBAAiB,CAACJ,EAAD,CAAvB;AAAA,GAAD,EAA8BW,OAA9B,CAAV;AAEA,SAAOX,EAAP;AACH","sourcesContent":["import { createStoreon, StoreonStore } from 'storeon';\n\nimport { NotificationProps } from './Notification';\n\nexport type NotificationItem = {\n    id: string;\n    isHiding?: boolean;\n};\nexport type NotificationsState = {\n    notifications: NotificationItem[];\n};\nexport type NotificationsEvents = {\n    add: NotificationItem;\n    hide: string;\n    remove: string;\n};\n\n/**\n * Создает хранилищие с ключем `notifications` к массиву с окнами.\n */\nexport const NotificationsStore = createStoreon([\n    (store: StoreonStore<NotificationsState, NotificationsEvents>) => {\n        store.on('@init', () => ({ notifications: [] }));\n\n        store.on('add', ({ notifications }, notif) => {\n            return { notifications: notifications.concat([notif]) };\n        });\n\n        store.on('hide', ({ notifications }, id) => {\n            return {\n                notifications: notifications.map((notif) => (id === notif.id ? { ...notif, isHiding: true } : notif)),\n            };\n        });\n\n        store.on('remove', ({ notifications }, id) => {\n            return { notifications: notifications.filter((notif) => id !== notif.id) };\n        });\n    },\n]);\n\nexport const closeNotification = (id: string, delay = 380) => {\n    const { dispatch } = NotificationsStore;\n\n    dispatch('hide', id);\n    setTimeout(() => dispatch('remove', id), delay);\n};\n\n/**\n * Открыть новое окно.\n * @param props Пропсы всплывающего окна\n * @return Идентификатор нового окна\n */\nexport function addNotification({ id: externalId, ...rest }: NotificationProps, timeout = 2000) {\n    const id = externalId || `plasma-notification-${Date.now()}`;\n    const { dispatch } = NotificationsStore;\n\n    dispatch('add', {\n        ...rest,\n        id,\n        isHiding: false,\n    });\n\n    setTimeout(() => closeNotification(id), timeout);\n\n    return id;\n}\n"],"file":"NotificationsStore.js"}