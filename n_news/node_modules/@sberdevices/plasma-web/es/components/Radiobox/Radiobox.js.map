{"version":3,"sources":["../../../src/components/Radiobox/Radiobox.tsx"],"names":["React","forwardRef","useMemo","styled","BaseboxDescription","BaseboxContentWrapper","useUniqId","white","extractTextFrom","StyledRoot","CheckboxRoot","StyledInput","CheckboxInput","StyledTrigger","CheckboxTrigger","StyledContent","CheckboxContent","StyledLabel","CheckboxLabel","attrs","outlineRadius","StyledEllipse","div","Radiobox","ref","id","label","description","disabled","style","className","ariaLabelExternal","rest","uniqId","uniqLabelId","uniqDescriptionId","radioboxId","ariaLabel"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,OAA5B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,kBAAT,EAA6BC,qBAA7B,EAAoDC,SAApD,EAA+DC,KAA/D,QAA4E,0BAA5E;AAGA,SAASC,eAAT,QAAgC,aAAhC;AACA,SACIC,UAAU,IAAIC,YADlB,EAEIC,WAAW,IAAIC,aAFnB,EAGIC,aAAa,IAAIC,eAHrB,EAIIC,aAAa,IAAIC,eAJrB,EAKIC,WAAW,IAAIC,aALnB,QAMO,sBANP;AAUA,IAAML,aAAa,gBAAGV,MAAM,CAACW,eAAD,CAAN,CAAwBK,KAAxB,CAA8B;AAChDC,EAAAA,aAAa,EAAE;AADiC,CAA9B,CAAH;AAAA;AAAA,0EAAnB;AAQA,IAAMH,WAAW,gBAAGd,MAAM,CAACe,aAAD,CAAT;AAAA;AAAA,6BAAjB;AAGA,IAAMG,aAAa,gBAAGlB,MAAM,CAACmB,GAAV;AAAA;AAAA,2PAYKf,KAZL,EAiBSM,aAjBT,CAAnB;AAsBA;AACA;AACA;AACA;;AACA,OAAO,IAAMU,QAAQ,gBAAGtB,UAAU,CAAkC,SAASsB,QAAT,OAEhEC,GAFgE,EAGlE;AAAA,MAFIC,EAEJ,QAFIA,EAEJ;AAAA,MAFQC,KAER,QAFQA,KAER;AAAA,MAFeC,WAEf,QAFeA,WAEf;AAAA,MAF4BC,QAE5B,QAF4BA,QAE5B;AAAA,MAFsCC,KAEtC,QAFsCA,KAEtC;AAAA,MAF6CC,SAE7C,QAF6CA,SAE7C;AAAA,MAFsEC,iBAEtE,QAFwD,YAExD;AAAA,MAF4FC,IAE5F;;AACE,MAAMC,MAAM,GAAG3B,SAAS,EAAxB;AACA,MAAM4B,WAAW,GAAG5B,SAAS,EAA7B;AACA,MAAM6B,iBAAiB,GAAG7B,SAAS,EAAnC;AACA,MAAM8B,UAAU,GAAGX,EAAE,IAAIQ,MAAzB;AACA,MAAMI,SAAS,GAAGnC,OAAO,CAAC;AAAA,WAAM6B,iBAAiB,IAAIvB,eAAe,CAACkB,KAAD,CAA1C;AAAA,GAAD,EAAoD,CAACK,iBAAD,EAAoBL,KAApB,CAApD,CAAzB;AAEA,sBACI,oBAAC,YAAD;AAAc,IAAA,SAAS,EAAEE,QAAzB;AAAmC,IAAA,KAAK,EAAEC,KAA1C;AAAiD,IAAA,SAAS,EAAEC,SAA5D;AAAuE,IAAA,QAAQ,EAAE,CAAC;AAAlF,kBACI,oBAAC,aAAD,eACQE,IADR;AAEI,IAAA,EAAE,EAAEI,UAFR;AAGI,IAAA,GAAG,EAAEZ,GAHT;AAII,IAAA,IAAI,EAAC,OAJT;AAKI,IAAA,QAAQ,EAAEI,QALd;AAMI,kBAAYS,SANhB;AAOI,wBAAkBF;AAPtB,KADJ,eAUI,oBAAC,qBAAD;AAAuB,IAAA,OAAO,EAAEC;AAAhC,kBACI,oBAAC,aAAD,qBACI,oBAAC,aAAD,OADJ,CADJ,EAIKV,KAAK,iBACF,oBAAC,eAAD,qBACI,oBAAC,WAAD;AAAa,IAAA,EAAE,EAAC,MAAhB;AAAuB,IAAA,EAAE,EAAEQ,WAA3B;AAAwC,mBAAa,OAAOR,KAAP,KAAiB;AAAtE,KACKA,KADL,CADJ,EAIKC,WAAW,iBACR,oBAAC,kBAAD;AAAoB,IAAA,EAAE,EAAE,CAAxB;AAA2B,IAAA,EAAE,EAAEQ;AAA/B,KACKR,WADL,CALR,CALR,CAVJ,CADJ;AA8BH,CAxCiC,CAA3B","sourcesContent":["import React, { forwardRef, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { BaseboxDescription, BaseboxContentWrapper, useUniqId, white } from '@sberdevices/plasma-core';\nimport type { BaseboxProps } from '@sberdevices/plasma-core';\n\nimport { extractTextFrom } from '../../utils';\nimport {\n    StyledRoot as CheckboxRoot,\n    StyledInput as CheckboxInput,\n    StyledTrigger as CheckboxTrigger,\n    StyledContent as CheckboxContent,\n    StyledLabel as CheckboxLabel,\n} from '../Checkbox/Checkbox';\n\nexport interface RadioboxProps extends BaseboxProps {}\n\nconst StyledTrigger = styled(CheckboxTrigger).attrs({\n    outlineRadius: '1.125rem',\n})`\n    flex-shrink: 0;\n    width: 1.25rem;\n    height: 1.25rem;\n    border-radius: 1.125rem;\n`;\nconst StyledLabel = styled(CheckboxLabel)`\n    line-height: 1.625rem;\n`;\nconst StyledEllipse = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n\n    margin: auto;\n    width: 0.625rem;\n    height: 0.625rem;\n    border-radius: 0.625rem;\n\n    background-color: ${white};\n    transition: transform 0.3s ease-in-out;\n    transform: scale(0);\n\n    /* stylelint-disable-next-line selector-nested-pattern, selector-type-no-unknown */\n    input:checked + label ${StyledTrigger} & {\n        transform: scale(1);\n    }\n`;\n\n/**\n * Переключатель, или *радиокнопка*.\n */\n// eslint-disable-next-line prefer-arrow-callback\nexport const Radiobox = forwardRef<HTMLInputElement, RadioboxProps>(function Radiobox(\n    { id, label, description, disabled, style, className, 'aria-label': ariaLabelExternal, ...rest },\n    ref,\n) {\n    const uniqId = useUniqId();\n    const uniqLabelId = useUniqId();\n    const uniqDescriptionId = useUniqId();\n    const radioboxId = id || uniqId;\n    const ariaLabel = useMemo(() => ariaLabelExternal || extractTextFrom(label), [ariaLabelExternal, label]);\n\n    return (\n        <CheckboxRoot $disabled={disabled} style={style} className={className} tabIndex={-1}>\n            <CheckboxInput\n                {...rest}\n                id={radioboxId}\n                ref={ref}\n                type=\"radio\"\n                disabled={disabled}\n                aria-label={ariaLabel}\n                aria-describedby={uniqDescriptionId}\n            />\n            <BaseboxContentWrapper htmlFor={radioboxId}>\n                <StyledTrigger>\n                    <StyledEllipse />\n                </StyledTrigger>\n                {label && (\n                    <CheckboxContent>\n                        <StyledLabel as=\"span\" id={uniqLabelId} aria-hidden={typeof label === 'string'}>\n                            {label}\n                        </StyledLabel>\n                        {description && (\n                            <BaseboxDescription mt={4} id={uniqDescriptionId}>\n                                {description}\n                            </BaseboxDescription>\n                        )}\n                    </CheckboxContent>\n                )}\n            </BaseboxContentWrapper>\n        </CheckboxRoot>\n    );\n});\n"],"file":"Radiobox.js"}