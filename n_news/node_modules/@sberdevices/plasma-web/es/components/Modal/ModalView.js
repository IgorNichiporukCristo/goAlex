var _excluded = ["role", "closeButtonAriaLabel", "children", "onClose"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import styled from 'styled-components';
import FocusLock from 'react-focus-lock';
import { backgroundPrimary } from '@sberdevices/plasma-core';
import { IconClose } from '@sberdevices/plasma-icons';
import { Button } from '../Button';
var StyledBody = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-web__sc-842hdo-0"
})(["position:relative;width:25rem;max-width:100%;border-radius:1.25rem;background-color:", ";"], backgroundPrimary);
var StyledContent = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-web__sc-842hdo-1"
})(["padding:2rem;"]);
var StyledButtonClose = /*#__PURE__*/styled(Button).attrs(function () {
  return {
    view: 'clear'
  };
}).withConfig({
  componentId: "plasma-web__sc-842hdo-2"
})(["position:absolute;top:0;right:0;margin:2rem;width:auto;height:auto;padding:0;"]);
/**
 * Визуальная часть модального окна.
 */

export var ModalView = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _ref$role = _ref.role,
      role = _ref$role === void 0 ? 'dialog' : _ref$role,
      closeButtonAriaLabel = _ref.closeButtonAriaLabel,
      children = _ref.children,
      onClose = _ref.onClose,
      rest = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/React.createElement(FocusLock, {
    returnFocus: true
  }, /*#__PURE__*/React.createElement(StyledBody, _extends({}, rest, {
    ref: ref,
    role: role,
    "aria-modal": "true"
  }), /*#__PURE__*/React.createElement(StyledContent, null, children), /*#__PURE__*/React.createElement(StyledButtonClose, {
    "aria-label": closeButtonAriaLabel,
    onClick: onClose,
    contentLeft: /*#__PURE__*/React.createElement(IconClose, {
      size: "s",
      color: "inherit"
    })
  })));
});
//# sourceMappingURL=ModalView.js.map