var _excluded = ["id", "isOpen", "onClose"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import ReactDOM from 'react-dom';
import styled, { css, keyframes } from 'styled-components';
import { overlay, useUniqId } from '@sberdevices/plasma-core';
import { ModalsContext, MODALS_PORTAL_ID } from './ModalsContext';
import { ModalView } from './ModalView';
var ESCAPE_KEYCODE = 27;
var wrapperHideAnimation = /*#__PURE__*/keyframes(["from{opacity:1;}to{opacity:0;}"]);
var bodyShowAnimation = /*#__PURE__*/keyframes(["from{opacity:0;transform:translateY(-100%);}to{opacity:1;transform:translateY(0);}"]);
var bodyHideAnimation = /*#__PURE__*/keyframes(["from{opacity:1;transform:translateY(0);}to{opacity:0;transform:translateY(-100%);}"]);
var StyledWrapper = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-web__sc-1d6y5ce-0"
})(["position:fixed;top:0;left:0;right:0;bottom:0;z-index:1;display:flex;align-items:center;justify-content:center;", ""], function (_ref) {
  var isHiding = _ref.isHiding;
  return isHiding && css(["animation:0.1s ", " ease-out;"], wrapperHideAnimation);
});
var StyledOverlay = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-web__sc-1d6y5ce-1"
})(["position:absolute;width:100%;height:100%;background-color:", ";cursor:pointer;"], function (_ref2) {
  var transparent = _ref2.transparent;
  return transparent ? 'transparent' : overlay;
});
var StyledModal = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-web__sc-1d6y5ce-2"
})(["position:absolute;", ""], function (_ref3) {
  var isHiding = _ref3.isHiding;
  return css(["animation:0.4s ", " ease-out;"], isHiding ? bodyHideAnimation : bodyShowAnimation);
});
/**
 * Модальное окно.
 * Управляет показом/скрытием, подложкой и анимацией визуальной части модального окна.
 */

export var Modal = function Modal(_ref4) {
  var id = _ref4.id,
      isOpen = _ref4.isOpen,
      onClose = _ref4.onClose,
      rest = _objectWithoutProperties(_ref4, _excluded);

  var uniqId = useUniqId();
  var innerId = id || uniqId;
  var wrapperRef = React.useRef(null);
  var portalRef = React.useRef(null);
  var controller = React.useContext(ModalsContext);
  React.useEffect(function () {
    var portal = document.getElementById(MODALS_PORTAL_ID);

    if (!portal) {
      portal = document.createElement('div');
      portal.setAttribute('id', MODALS_PORTAL_ID);
      portal.setAttribute('aria-live', 'off');
      portal.setAttribute('role', 'presentation');
      portal.style.position = 'relative';
      portal.style.zIndex = '9000';
      document.body.appendChild(portal);
    }

    portalRef.current = portal;
    return function () {
      controller.unregister(innerId);
    };
  }, []);
  React.useEffect(function () {
    var onKeyDown = function onKeyDown(event) {
      if (event.keyCode === ESCAPE_KEYCODE && wrapperRef.current && portalRef.current && portalRef.current.contains(wrapperRef.current) && portalRef.current.children[portalRef.current.children.length - 1] === wrapperRef.current) {
        onClose === null || onClose === void 0 ? void 0 : onClose();
      }
    };

    window.addEventListener('keydown', onKeyDown);
    return function () {
      window.removeEventListener('keydown', onKeyDown);
    };
  }, []);

  if (isOpen) {
    controller.register(innerId);
  } else {
    controller.unregister(innerId);
    return null;
  }

  return portalRef.current && /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/React.createElement(StyledWrapper, {
    ref: wrapperRef
  }, /*#__PURE__*/React.createElement(StyledOverlay, {
    transparent: controller.items.indexOf(innerId) !== 0,
    onClick: onClose
  }), /*#__PURE__*/React.createElement(StyledModal, null, /*#__PURE__*/React.createElement(ModalView, _extends({
    onClose: onClose
  }, rest)))), portalRef.current);
};
//# sourceMappingURL=Modal.js.map