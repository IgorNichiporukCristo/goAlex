{"version":3,"sources":["../../../../src/components/Dropdown/keyboardNavigation/useKeyboardNavigation.ts"],"names":["useCallback","getActionFromKey","getUpdatedIndex","Actions","useOnComboType","INITIAL_INDEX","useKeyboardNavigation","items","isOpen","index","onToggle","onItemSelect","onIndexChange","getIndexByTyping","onKeyDown","event","length","action","Last","First","Next","Previous","PageUp","PageDown","preventDefault","Select","stopPropagation","Open","Close","Type","newIndex","key","undefined"],"mappings":"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","sourcesContent":["import { useCallback } from 'react';\n\nimport type { DropdownPopupProps } from '../DropdownPopup';\nimport type { DropdownNode, OnItemSelect, OnIndexChange } from '../Dropdown.types';\n\nimport { getActionFromKey, getUpdatedIndex, Actions } from './utils';\nimport { useOnComboType } from './useOnComboType';\n\nexport interface UseKeyboardNavigationProps {\n    items: DropdownNode[];\n    isOpen?: boolean;\n    index?: number;\n    onToggle?: DropdownPopupProps['onToggle'];\n    onItemSelect?: OnItemSelect;\n    onIndexChange?: OnIndexChange;\n}\n\nexport const INITIAL_INDEX = 0;\n\n/**\n * Клавиатурная навигация для дропдауна.\n * Работает для каждого инстанса дропдауна (попапа) отдельно.\n */\nexport const useKeyboardNavigation = ({\n    items,\n    isOpen,\n    index = INITIAL_INDEX,\n    onToggle,\n    onItemSelect,\n    onIndexChange,\n}: UseKeyboardNavigationProps) => {\n    const getIndexByTyping = useOnComboType({ index, items });\n\n    const onKeyDown = useCallback(\n        (event) => {\n            if (!items.length) {\n                return;\n            }\n            const action = getActionFromKey(event, isOpen);\n\n            if (\n                action === Actions.Last ||\n                action === Actions.First ||\n                action === Actions.Next ||\n                action === Actions.Previous ||\n                action === Actions.PageUp ||\n                action === Actions.PageDown\n            ) {\n                event.preventDefault();\n                onIndexChange?.(getUpdatedIndex(action, index, items));\n            } else if (action === Actions.Select) {\n                event.stopPropagation();\n                event.preventDefault();\n                onItemSelect?.(items[index], event);\n            } else if (action === Actions.Open) {\n                event.preventDefault();\n                onToggle?.(true, event);\n            } else if (action === Actions.Close) {\n                event.preventDefault();\n                onToggle?.(false, event);\n            } else if (action === Actions.Type) {\n                event.preventDefault();\n                const newIndex = getIndexByTyping(event.key);\n                if (newIndex !== undefined) {\n                    onIndexChange?.(newIndex);\n                }\n            }\n        },\n        [isOpen, index, items, onIndexChange, onToggle, getIndexByTyping],\n    );\n\n    return { onKeyDown, index };\n};\n"],"file":"useKeyboardNavigation.js"}