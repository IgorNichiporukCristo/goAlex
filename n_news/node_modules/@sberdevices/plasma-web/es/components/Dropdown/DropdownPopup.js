function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useState } from 'react';
import styled, { css } from 'styled-components';
import { Popup } from '../Popup';

/**
 * Попап с внешним контролем над видимостью через пропы `isOpen` и `onToggle`.
 */
export var DropdownPopup = /*#__PURE__*/styled(Popup).withConfig({
  componentId: "plasma-web__sc-gt8g99-0"
})(["& &{width:100%;--plasma-popup-width:var(--plasma-popup-nested-width);--plasma-popup-padding:var(--plasma-popup-nested-padding);--plasma-popup-margin:var(--plasma-popup-nested-margin);}", ""], function (_ref) {
  var offsetTop = _ref.offsetTop;
  return offsetTop !== undefined && css(["--plasma-popup-padding:", " 0 0;"], offsetTop);
});
/**
 * Попап, не требующий внешнего контроля над видимостью.
 */

export var DropdownSelfControlledPopup = function DropdownSelfControlledPopup(_ref2) {
  var rest = _extends({}, _ref2);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isOpen = _useState2[0],
      setIsOpen = _useState2[1];

  return /*#__PURE__*/React.createElement(DropdownPopup, _extends({}, rest, {
    isOpen: isOpen,
    onToggle: function onToggle(is) {
      return setIsOpen(is);
    }
  }));
};
//# sourceMappingURL=DropdownPopup.js.map