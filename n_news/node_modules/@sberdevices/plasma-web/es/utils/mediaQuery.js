function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { css } from 'styled-components';
import { gridBreakpoints, gridColumns, gridGutters, gridMargins } from '@sberdevices/plasma-core';
export var breakpoints = /*#__PURE__*/_objectSpread({
  XXL: 1200
}, gridBreakpoints);
export var columns = /*#__PURE__*/_objectSpread({
  XXL: 16
}, gridColumns);
export var margins = /*#__PURE__*/_objectSpread( /*#__PURE__*/_objectSpread({
  XXL: 4
}, gridMargins), {}, {
  XL: 4
});
export var gutters = /*#__PURE__*/_objectSpread({
  XXL: 1
}, gridGutters);
export var sizes = /*#__PURE__*/Object.keys(breakpoints);
/**
 * Обертка над css-медиазапросами с заранее определенными брейкпоинтами.
 */

export var mediaQuery = function mediaQuery(breakpoint) {
  var deviceScale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var index = sizes.indexOf(breakpoint);
  var nextBreakpoint = sizes[index - 1];
  var min = breakpoints[breakpoint] > 0 ? breakpoints[breakpoint] * deviceScale : null;
  var max = breakpoints[nextBreakpoint] ? (breakpoints[nextBreakpoint] - 1) * deviceScale : null;

  if (min === null && max !== null) {
    return function (content) {
      return css(["@media (max-width:", "px){", "}"], max, content);
    };
  }

  if (min !== null && max !== null) {
    return function (content) {
      return css(["@media screen and (min-width:", "px) and (max-width:", "px){", "}"], min, max, content);
    };
  }

  return function (content) {
    return css(["@media (min-width:", "px){", "}"], min, content);
  };
};
//# sourceMappingURL=mediaQuery.js.map