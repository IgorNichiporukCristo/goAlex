function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { findTabbableDescendants } from './tabbable';
/**
 *  Менеджер фокуса при открытии и закрытии нод при использовании focus-trap.
 *  Также необходим, чтобы фокус всегда должен находиться внутри необходимой ноды.
 * */

export var FocusManager = function FocusManager() {
  var _this = this;

  _classCallCheck(this, FocusManager);

  _defineProperty(this, "focusAfterElements", []);

  _defineProperty(this, "focusNodes", []);

  _defineProperty(this, "handleFocus", function () {
    // Фокус всегда должен находиться внутри необходимой ноды
    var focusNode = _this.focusNodes[_this.focusNodes.length - 1];

    if (!focusNode || focusNode.contains(document.activeElement)) {
      return;
    } // Выделяем первый tabbable элемент


    var el = findTabbableDescendants(focusNode)[0] || focusNode;
    el.focus();
  });

  _defineProperty(this, "markForFocusAfter", function (focusAfterNode) {
    var node = focusAfterNode && focusAfterNode.current ? focusAfterNode.current : document.activeElement;

    _this.focusAfterElements.push(node);
  });

  _defineProperty(this, "returnFocus", function () {
    var _this$focusAfterEleme;

    var toFocus = (_this$focusAfterEleme = _this.focusAfterElements.pop()) !== null && _this$focusAfterEleme !== void 0 ? _this$focusAfterEleme : null;

    if (toFocus) {
      toFocus.focus();
    }
  });

  _defineProperty(this, "setupScopedFocus", function (element) {
    _this.focusNodes.push(element);

    document.addEventListener('focusin', _this.handleFocus, true);
  });

  _defineProperty(this, "teardownScopedFocus", function () {
    _this.focusNodes.pop();

    document.removeEventListener('focusin', _this.handleFocus);
  });
};