var _excluded = ["target", "children", "isOpen", "trigger", "arrow", "placement", "offset", "isFocusTrapped", "closeOnOverlayClick", "closeOnEsc", "onToggle"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { memo, useRef, useCallback, useEffect, useState } from 'react';
import styled from 'styled-components';
import { usePopper } from 'react-popper';
import { useFocusTrap, useForkRef } from '../../hooks';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('Popover/Popover');
var ESCAPE_KEYCODE = 27;
var StyledRoot = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma__sc-d4now3-0"
})(["position:relative;box-sizing:border-box;display:inline-flex;"]);
var StyledPopover = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma__sc-d4now3-1"
})(["position:absolute;z-index:1;&[data-popper-placement^='top'] > #popover-arrow{bottom:-0.25rem;}&[data-popper-placement^='bottom'] > #popover-arrow{top:-0.25rem;}&[data-popper-placement^='left'] > #popover-arrow{right:-0.25rem;}&[data-popper-placement^='right'] > #popover-arrow{left:-0.25rem;}"]);
export var getPlacement = function getPlacement(placement) {
  return "".concat(placement, "-start");
};

var getAutoPlacements = function getAutoPlacements(placements) {
  return (placements || []).map(function (placement) {
    return getPlacement(placement);
  });
};
/**
 * Всплывающее окно с возможностью позиционирования
 * и вызова по клику либо ховеру.
 */


export var Popover = /*#__PURE__*/memo( /*#__PURE__*/React.forwardRef(function (_ref, outerRootRef) {
  var target = _ref.target,
      children = _ref.children,
      isOpen = _ref.isOpen,
      trigger = _ref.trigger,
      arrow = _ref.arrow,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'auto' : _ref$placement,
      _ref$offset = _ref.offset,
      offset = _ref$offset === void 0 ? [0, 0] : _ref$offset,
      _ref$isFocusTrapped = _ref.isFocusTrapped,
      isFocusTrapped = _ref$isFocusTrapped === void 0 ? true : _ref$isFocusTrapped,
      _ref$closeOnOverlayCl = _ref.closeOnOverlayClick,
      closeOnOverlayClick = _ref$closeOnOverlayCl === void 0 ? true : _ref$closeOnOverlayCl,
      _ref$closeOnEsc = _ref.closeOnEsc,
      closeOnEsc = _ref$closeOnEsc === void 0 ? true : _ref$closeOnEsc,
      onToggle = _ref.onToggle,
      rest = _objectWithoutProperties(_ref, _excluded);

  var rootRef = useRef(null);
  var popoverRef = useRef(null);
  var handleRef = useForkRef(rootRef, outerRootRef);
  var trapRef = useFocusTrap(isOpen && isFocusTrapped);
  var popoverForkRef = useForkRef(popoverRef, trapRef);

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      arrowElement = _useState2[0],
      setArrowElement = _useState2[1];

  var isAutoArray = Array.isArray(placement);
  var isAuto = isAutoArray || placement === 'auto';

  var _usePopper = usePopper(rootRef.current, popoverRef.current, {
    placement: getPlacement(isAutoArray ? 'auto' : placement),
    modifiers: [{
      name: 'offset',
      options: {
        offset: [offset[0], offset[1]]
      }
    }, {
      name: 'flip',
      enabled: isAuto,
      options: {
        allowedAutoPlacements: getAutoPlacements(isAutoArray ? placement : [])
      }
    }, {
      name: 'arrow',
      options: {
        element: arrowElement
      }
    }]
  }),
      styles = _usePopper.styles,
      attributes = _usePopper.attributes,
      forceUpdate = _usePopper.forceUpdate;

  var onEscape = useCallback(function (event) {
    if (isOpen && closeOnEsc && event.keyCode === ESCAPE_KEYCODE) {
      onToggle === null || onToggle === void 0 ? void 0 : onToggle(false, event);
    }
  }, [closeOnEsc, isOpen, onToggle]);
  var onDocumentClick = useCallback(function (event) {
    if (isOpen && closeOnOverlayClick && onToggle) {
      var _rootRef$current;

      var targetIsRoot = event.target === rootRef.current;
      var rootHasTarget = (_rootRef$current = rootRef.current) === null || _rootRef$current === void 0 ? void 0 : _rootRef$current.contains(event.target);

      if (!targetIsRoot && !rootHasTarget) {
        onToggle(false, event);
      }
    }
  }, [closeOnOverlayClick, isOpen, onToggle]);
  var onClick = useCallback(function (event) {
    if (trigger === 'click') {
      var _popoverRef$current;

      var targetIsPopover = event.target === popoverRef.current;
      var rootHasTarget = (_popoverRef$current = popoverRef.current) === null || _popoverRef$current === void 0 ? void 0 : _popoverRef$current.contains(event.target);

      if (!targetIsPopover && !rootHasTarget) {
        onToggle === null || onToggle === void 0 ? void 0 : onToggle(!isOpen, event);
      }
    }
  }, [trigger, isOpen, onToggle]);
  var onMouseEnter = useCallback(function (event) {
    if (trigger === 'hover') {
      onToggle === null || onToggle === void 0 ? void 0 : onToggle(true, event);
    }
  }, [trigger, onToggle]);
  var onMouseLeave = useCallback(function (event) {
    if (trigger === 'hover') {
      onToggle === null || onToggle === void 0 ? void 0 : onToggle(false, event);
    }
  }, [trigger, onToggle]);
  var onFocus = useCallback(function (event) {
    if (trigger === 'hover') {
      onToggle === null || onToggle === void 0 ? void 0 : onToggle(true, event);
    }
  }, [trigger, onToggle]);
  var onBlur = useCallback(function (event) {
    if (trigger === 'hover') {
      onToggle === null || onToggle === void 0 ? void 0 : onToggle(false, event);
    }
  }, [trigger, onToggle]);
  useEffect(function () {
    document.addEventListener('click', onDocumentClick);
    return function () {
      return document.removeEventListener('click', onDocumentClick);
    };
  }, [closeOnOverlayClick, isOpen, onToggle]);
  useEffect(function () {
    window.addEventListener('keydown', onEscape);
    return function () {
      return window.removeEventListener('keydown', onEscape);
    };
  }, [closeOnEsc, isOpen, onToggle]);
  useEffect(function () {
    if (!isOpen || !forceUpdate) {
      return;
    }
    /*
     * INFO: Метод forceUpdate содержит в себе flushSync и приводит
     * к повторному рендеру компонента, который уже находится в процессе рендера.
     * Данный хак, нужен для того, чтобы это поведение избежать и перенаправить
     * вызов метода в очередь микрозадач.
     */


    Promise.resolve().then(forceUpdate);
  }, [isOpen, forceUpdate]);
  return /*#__PURE__*/React.createElement(StyledRoot, _extends({
    ref: handleRef,
    onClick: onClick,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onFocus: onFocus,
    onBlur: onBlur
  }, rest), target, children && /*#__PURE__*/React.createElement(StyledPopover, _extends({}, attributes.popper, {
    ref: popoverForkRef,
    style: _objectSpread(_objectSpread({}, styles.popper), {
      display: isOpen ? 'block' : 'none'
    })
  }), arrow && /*#__PURE__*/React.createElement("div", _extends({
    id: "popover-arrow",
    ref: setArrowElement,
    style: styles.arrow
  }, attributes.arrow), arrow), children));
}));