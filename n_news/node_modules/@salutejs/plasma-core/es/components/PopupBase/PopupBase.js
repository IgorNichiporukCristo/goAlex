var _excluded = ["id", "isOpen", "placement", "offset", "frame", "children", "role", "zIndex"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { useEffect, useRef, useState, useContext } from 'react';
import ReactDOM from 'react-dom';
import styled, { css } from 'styled-components';
import { useUniqId } from '../../hooks';
import { PopupBaseContext, POPOVER_PORTAL_ID } from './PopupBaseContext';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('PopupBase/PopupBase');
export var DEFAULT_Z_INDEX = 9000;
var PopupBaseView = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma__sc-1md4coi-0"
})(["position:relative;max-width:100%;pointer-events:all;"]);

var handlePosition = function handlePosition(placement, offset) {
  var x = '0rem';
  var y = '0rem';

  if (offset) {
    var _offset = _slicedToArray(offset, 2),
        _x = _offset[0],
        _y = _offset[1];

    x = typeof _x === 'number' ? "".concat(_x, "rem") : _x;
    y = typeof _y === 'number' ? "".concat(_y, "rem") : _y;
  }

  if (!placement || placement === 'center') {
    return css(["left:calc(50% + ", ");top:calc(50% - ", ");transform:translate(-50%,-50%);"], x, y);
  }

  var left;
  var right;
  var top;
  var bottom;
  var placements = placement.split('-');
  placements.forEach(function (placement) {
    switch (placement) {
      case 'left':
        left = x;
        break;

      case 'right':
        right = x;
        break;

      case 'top':
        top = y;
        break;

      case 'bottom':
        bottom = y;
        break;

      default:
        break;
    }
  });
  var isCenteredX = left === undefined && right === undefined;
  var isCenteredY = top === undefined && bottom === undefined;
  return css(["left:", ";right:", ";top:", ";bottom:", ";", " ", ""], left, right, top, bottom, isCenteredX && css(["left:calc(50% + ", ");transform:translateX(-50%);"], x), isCenteredY && css(["top:calc(50% - ", ");transform:translateY(-50%);"], y));
};

var PopupBaseRoot = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma__sc-1md4coi-1"
})(["", " ", " ", ";"], function (_ref) {
  var frame = _ref.frame;
  return css(["position:", ";"], frame === 'document' ? 'fixed' : 'absolute');
}, function (_ref2) {
  var zIndex = _ref2.zIndex;
  return css(["z-index:", ";"], zIndex || DEFAULT_Z_INDEX);
}, function (_ref3) {
  var placement = _ref3.placement,
      offset = _ref3.offset;
  return handlePosition(placement, offset);
});
/**
 * Базовый PopupBase.
 * Управляет показом/скрытием и анимацией(?) высплывающего окна.
 */

export var PopupBase = function PopupBase(_ref4) {
  var id = _ref4.id,
      isOpen = _ref4.isOpen,
      placement = _ref4.placement,
      offset = _ref4.offset,
      _ref4$frame = _ref4.frame,
      frame = _ref4$frame === void 0 ? 'document' : _ref4$frame,
      children = _ref4.children,
      role = _ref4.role,
      zIndex = _ref4.zIndex,
      rest = _objectWithoutProperties(_ref4, _excluded);

  var uniqId = useUniqId();
  var innerId = id || uniqId;
  var portalRef = useRef(null);
  var controller = useContext(PopupBaseContext);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      forceRender = _useState2[1];

  useEffect(function () {
    var portal = document.getElementById(POPOVER_PORTAL_ID);

    if (frame !== 'document' && frame && frame.current) {
      portal = frame.current;
    }

    if (!portal) {
      portal = document.createElement('div');
      portal.setAttribute('id', POPOVER_PORTAL_ID);
      document.body.appendChild(portal);
    }

    portalRef.current = portal;
    /**
     * Изменение стейта нужно для того, чтобы PopupBase
     * отобразился после записи DOM элемента в portalRef.current
     */

    forceRender(true);
    return function () {
      controller.unregister(innerId);
    };
  }, [controller, innerId, zIndex]);

  if (isOpen) {
    controller.register(innerId);
  } else {
    controller.unregister(innerId);
    return null;
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, portalRef.current && /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/React.createElement(PopupBaseRoot, {
    placement: placement,
    frame: frame,
    offset: offset,
    zIndex: zIndex
  }, /*#__PURE__*/React.createElement(PopupBaseView, _extends({}, rest, {
    role: role
  }), children)), portalRef.current));
};