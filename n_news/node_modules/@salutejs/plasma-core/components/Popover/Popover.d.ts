import React from 'react';
import type { HTMLAttributes, ReactNode, SyntheticEvent } from 'react';
import PopperJS from '@popperjs/core';
export declare type PopoverPlacementBasic = 'top' | 'bottom' | 'right' | 'left';
export declare type PopoverPlacement = PopoverPlacementBasic | 'auto';
export interface PopoverProps extends HTMLAttributes<HTMLDivElement> {
    /**
     * Всплывающее окно раскрыто или нет.
     */
    isOpen: boolean;
    /**
     * Способ всплывающего окна - наведение или клик мышью.
     */
    trigger?: 'hover' | 'click';
    /**
     * Сторона открытия окна относительно target элемента. По умолчанию "auto".
     */
    placement?: PopoverPlacement | Array<PopoverPlacementBasic>;
    /**
     * Отступ окна относительно элемента, у которого оно вызвано.
     */
    offset?: [number, number];
    /**
     * Элемент, рядом с которым произойдет вызов всплывающего окна.
     */
    target?: ReactNode;
    /**
     * Стрелка над элементом.
     */
    arrow?: ReactNode;
    /**
     * Контент всплывающего окна.
     */
    children?: ReactNode;
    /**
     * Блокировать ли фокус на всплывающем окне(по умолчанию true).
     */
    isFocusTrapped?: boolean;
    /**
     * Событие сворачивания/разворачивания всплывающего окна.
     */
    onToggle?: (isOpen: boolean, event: SyntheticEvent | Event) => void;
    /**
     * Закрывать окно при нажатии вне области окна(по умолчанию true).
     */
    closeOnOverlayClick?: boolean;
    /**
     * Закрывать окно при нажатии ESC(по умолчанию true).
     */
    closeOnEsc?: boolean;
}
export declare const getPlacement: (placement: PopoverPlacement) => PopperJS.Placement;
/**
 * Всплывающее окно с возможностью позиционирования
 * и вызова по клику либо ховеру.
 */
export declare const Popover: React.NamedExoticComponent<PopoverProps & React.RefAttributes<HTMLDivElement>>;
