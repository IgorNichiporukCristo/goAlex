"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSheetSwipe = void 0;

var _lodash = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("lodash.throttle"));

var _react = /*#__PURE__*/require("react");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var SWIPE_THRESHOLD = 0.2;
var THROTTLE_DEFAULT_MS = 0;

var isScrollable = function isScrollable(element) {
  if (!element) {
    return false;
  }

  var style = getComputedStyle(element);
  return style.overflow === 'scroll' || style.overflow === 'auto' || style.overflowY === 'scroll' || style.overflowY === 'auto';
};

var useSheetSwipe = function useSheetSwipe(args) {
  var contentWrapperRef = args.contentWrapperRef,
      contentRef = args.contentRef,
      handleRef = args.handleRef,
      onClose = args.onClose,
      _args$throttleMs = args.throttleMs,
      throttleMs = _args$throttleMs === void 0 ? THROTTLE_DEFAULT_MS : _args$throttleMs;

  var _useState = (0, _react.useState)(true),
      _useState2 = _slicedToArray(_useState, 2),
      isTopScroll = _useState2[0],
      setIsTopScroll = _useState2[1];

  var isOverscroll = (0, _react.useRef)(false);
  var startY = (0, _react.useRef)(0);
  var currentY = (0, _react.useRef)(0);
  (0, _react.useEffect)(function () {
    var contentWrapperEl = contentWrapperRef.current;
    var handleEl = handleRef.current;
    var contentEl = contentRef.current;
    var triggerElement = !isTopScroll ? handleEl : contentWrapperEl;

    if (!triggerElement || !contentEl || !contentWrapperEl) {
      return;
    }

    var nodes = Array.from(contentWrapperEl.querySelectorAll('*'));
    var scrollableElements = nodes.filter(isScrollable);
    contentWrapperEl.style.willChange = 'transform';

    var onTouchStart = function onTouchStart(event) {
      isOverscroll.current = false;
      startY.current = event.changedTouches[0].clientY;
      currentY.current = startY.current;
      contentWrapperEl.style.transition = 'none';
    };

    var onTouchMove = function onTouchMove(event) {
      var clientY = event.changedTouches[0].clientY;
      currentY.current = Math.max(startY.current, clientY);
      var offsetY = currentY.current - startY.current;

      if (isOverscroll.current) {
        startY.current = Infinity;
        return;
      }

      if (offsetY !== 0 && event.cancelable) {
        event.preventDefault();
      }

      contentWrapperEl.style.transform = "translateY(".concat(offsetY, "px)");
    };

    var onTouchEnd = function onTouchEnd(event) {
      isOverscroll.current = false;
      var curtainHeight = contentWrapperEl.offsetHeight;
      var endY = event.changedTouches[0].clientY;
      var offsetY = endY - startY.current;
      contentWrapperEl.style.transform = '';
      contentWrapperEl.style.transition = '';

      if (offsetY / curtainHeight > SWIPE_THRESHOLD) {
        onClose();
      }
    };

    var onScroll = (0, _lodash["default"])(function (event) {
      var onTop = event.target.scrollTop <= 0;

      if (!onTop) {
        isOverscroll.current = true;
      }

      setIsTopScroll(onTop);
    }, throttleMs);
    triggerElement.addEventListener('touchstart', onTouchStart);
    triggerElement.addEventListener('touchmove', onTouchMove);
    triggerElement.addEventListener('touchend', onTouchEnd);
    scrollableElements.forEach(function (element) {
      element.addEventListener('scroll', onScroll);
    });
    return function () {
      triggerElement.removeEventListener('touchstart', onTouchStart);
      triggerElement.removeEventListener('touchmove', onTouchMove);
      triggerElement.removeEventListener('touchend', onTouchEnd);
      scrollableElements.forEach(function (element) {
        element.removeEventListener('scroll', onScroll);
      });
    };
  }, [isTopScroll]);
};

exports.useSheetSwipe = useSheetSwipe;